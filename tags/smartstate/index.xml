<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christian&#39;s Blog</title>
    <link>http://www.jung-christian.de/tags/smartstate/index.xml</link>
    <description>Recent content on Christian&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017 by Christian Jung</copyright>
    <atom:link href="http://www.jung-christian.de/tags/smartstate/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Custom Smart State Analysis Profiles</title>
      <link>http://www.jung-christian.de/post/2017/10/modify-ssa-profile/</link>
      <pubDate>Tue, 10 Oct 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/10/modify-ssa-profile/</guid>
      <description>

&lt;h1 id=&#34;about-smart-state-analysis&#34;&gt;About Smart State Analysis&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.redhat.com/cloudforms&#34;&gt;CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; have a feature called &amp;ldquo;Smart State Analysis&amp;rdquo; which allows them to analyse the disk of a Virtual Machine, Instance, Template or Image and retrieve data about the installed Operating System, applications, local groups and users and more. This is implemented completely without the need of additional agents and as a consequence is independent of the VM power state.&lt;/p&gt;

&lt;p&gt;Smart State can be also sued for Containers and Hypervisors, but the following example focuses on Virtual Machines.&lt;/p&gt;

&lt;h1 id=&#34;smart-state-analysis-profiles&#34;&gt;Smart State Analysis Profiles&lt;/h1&gt;

&lt;p&gt;A Smart State Analysis Profile defines which information is retrieved from the Virtual Machine. By default the following information is retrieved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Services: Which services are installed (Works for Windows and Linux including SysV and SystemD)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;User Accounts: Retrieves information about local user and group accounts&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Software: Information about installed applications (on Windows retrieved from the registry, on Linux by running a query against the RPM or dpkg database)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VM Configuration and System: some additional information about the VM&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Administrators can create their own Analysis Profiles and define a list of additional files which should be retrieved. The Profile can either only check for the existence of the specified file, or also retrieve the content of the file.&lt;/p&gt;

&lt;h1 id=&#34;create-a-custom-smart-state-analysis-profile&#34;&gt;Create a custom Smart State Analysis Profile&lt;/h1&gt;

&lt;p&gt;It is very simple to create a customized Profile. Simply copy the out of the box &amp;ldquo;sample&amp;rdquo; Profile and name the copy &amp;ldquo;default&amp;rdquo;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;log into the appliance with administrator privileges&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;navigate to &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; by clicking on the username on the top right corner&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;navigate to &lt;strong&gt;&lt;em&gt;Analysis Profiles&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;simple&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Copy selected analysis profile&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/copy-analysis-profile.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/copy-analysis-profile-300x112.png&#34; alt=&#34;copy analysis profile&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;make sure the copy is called &amp;ldquo;default&amp;rdquo; and check or un-check the appropriate options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/copy-ssa-profile.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/copy-ssa-profile-300x132.png&#34; alt=&#34;name the profile default&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the Profile is not called &amp;ldquo;default&amp;rdquo; it will not be used unless it is explicitly assigned. Read the chapter &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_cloudforms/4.5/html/assigning_a_custom_analysis_profile_to_a_virtual_machine/index&#34;&gt;Assigning a Custom Analysis Profile to a Virtual Machine&lt;/a&gt; in the CloudForms Documentation for more details.&lt;/p&gt;

&lt;h1 id=&#34;modify-the-smart-state-analysis-profile&#34;&gt;Modify the Smart State Analysis Profile&lt;/h1&gt;

&lt;p&gt;To show how this feature works, add an additional file. In the example below, the content of /etc/sysconfig/selinux is retrieved during Smart State Analysis. There is another blog post about &lt;a href=&#34;../control-policy-selinux/&#34;&gt;How to create a Compliance Policy to enforce SELinux mode&lt;/a&gt; illustrating why this can be useful.&lt;/p&gt;

&lt;p&gt;Edit the previously created State Analysis Profile:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;log into the appliance with administrator privileges&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;navigate to &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; by clicking on the username on the top right corner&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;navigate to &lt;strong&gt;&lt;em&gt;Analysis Profiles&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;default&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;click on the tab &lt;strong&gt;&lt;em&gt;file&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add a new line:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Name:&lt;/em&gt;&lt;/strong&gt; /etc/sysconfig/selinux&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Collect Contents?&lt;/em&gt;&lt;/strong&gt; click (check the box)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/add-selinux-to-analysis-profile.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/add-selinux-to-analysis-profile-300x95.png&#34; alt=&#34;Add selinux to Analysis Profile&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;&lt;em&gt;save&lt;/em&gt;&lt;/strong&gt; on the right in the same row of the table&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;click &lt;strong&gt;&lt;em&gt;Add&lt;/em&gt;&lt;/strong&gt; to save all modifications&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; It is important the name of the Profile is &amp;ldquo;default&amp;rdquo;. To use a different Profile name, check the chapter &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_cloudforms/4.5/html/assigning_a_custom_analysis_profile_to_a_virtual_machine/index&#34;&gt;Assigning a Custom Analysis Profile to a Virtual Machine&lt;/a&gt; in the CloudForms Documentation for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SELinux Compliance Policy</title>
      <link>http://www.jung-christian.de/post/2017/10/control-policy-selinux/</link>
      <pubDate>Tue, 10 Oct 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/10/control-policy-selinux/</guid>
      <description>

&lt;h1 id=&#34;compliance-policies&#34;&gt;Compliance Policies&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.redhat.com/cloudforms&#34;&gt;CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; allow the definition of Compliance Policies which can be used to verify consistency of Virtual Machines, Instances, Hypervisors and other objects, in the entire environment. Compliance Policies can  trigger actions to be able to notify about non-compliance or to go one step further and enforce compliance, for example by using Ansible Playbooks to fix the problem.&lt;/p&gt;

&lt;p&gt;There are a number of examples about Compliance Policies on the &lt;a href=&#34;http://cloudformsblog.redhat.com/tag/compliance/&#34;&gt;official Red Hat CloudForms blog&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;adjust-the-smart-state-analysis-profile&#34;&gt;Adjust the Smart State Analysis Profile&lt;/h1&gt;

&lt;p&gt;A separate blog post goes into details on how to &lt;a href=&#34;../modify-ssa-profile/&#34;&gt;create and modify a Smart State Analysis Profile&lt;/a&gt;. When creating the profile, it is important its name is &amp;ldquo;default&amp;rdquo; and the policy retrieves the content of the file /etc/sysconfig/selinux.&lt;/p&gt;

&lt;h1 id=&#34;control-policies&#34;&gt;Control Policies&lt;/h1&gt;

&lt;p&gt;Policies in CloudForms and ManageIQ are always a combination of three items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event: the event triggers the evaluation of the condition. An event can be something like &amp;ldquo;VM Power On&amp;rdquo;, &amp;ldquo;Analysis completed&amp;rdquo; and many more. A list of out of the box events can be found by clicking on &lt;strong&gt;&lt;em&gt;Control&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt;, and then clicking on &lt;strong&gt;&lt;em&gt;Events&lt;/em&gt;&lt;/strong&gt; in the accordion on the left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/list-of-events.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/list-of-events-300x96.png&#34; alt=&#34;out of the box events&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The screenshot only shows a subset of all available events.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Condition: the condition is evaluated after the specified event was detected. A condition can verify that a specific Operating System is installed, the VM configuration meets certain criteria and many more&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Action: after detecting the event and validating the condition, an action can be triggered. Actions can be specified differently if the condition was TRUE or FALSE. A Control Policy can can send an email alert, trigger a SNMP trap or any customized action. A number of actions are already shipped out of the box and can be found by clicking on &lt;strong&gt;&lt;em&gt;Control&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt; and then &lt;strong&gt;&lt;em&gt;Actions&lt;/em&gt;&lt;/strong&gt; in the accordion on the left&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/list-of-actions.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/list-of-actions-300x95.png&#34; alt=&#34;list of actions&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The screenshot only shows a subset of all available actions.&lt;/p&gt;

&lt;h1 id=&#34;compliance-policies-1&#34;&gt;Compliance Policies&lt;/h1&gt;

&lt;p&gt;Compliance policies are similar to Control Policies, but do not listen to events. To validate a Compliance Policy, the user can click on &lt;strong&gt;&lt;em&gt;Policy&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Check Compliance of Last Known Configuration&lt;/em&gt;&lt;/strong&gt;, or a Control Policy can trigger an Compliance Policy Check as an Action.&lt;/p&gt;

&lt;p&gt;Compliance Policies can also mark the evaluated object as either Compliant or Non-Compliant. This information can also be used in Reports and Dashboards for a better overview or to be exported for further analysis. More information about Control and Compliance Policies can be found in the &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_cloudforms/4.5/html/policies_and_profiles_guide/&#34;&gt;Policies and Profiles Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;create-a-compliance-policy-for-selinux&#34;&gt;Create a Compliance Policy for SELinux&lt;/h1&gt;

&lt;p&gt;To check if SELinux is in enforcing mode, a compliance policy like this can be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Condition: analyse the content of /etc/sysconfig/selinux and verify &amp;ldquo;SELinux=enforcing&amp;rdquo; is found in the file&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Action: mark the VM as compliant or non-compliant&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of such a policy can be found on &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/control-policies&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;enable-the-policy&#34;&gt;Enable the Policy&lt;/h1&gt;

&lt;p&gt;To enable the Compliance Policy, it has to be part of a Policy Profile. The example found on &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/control-policies&#34;&gt;Github&lt;/a&gt; is pre-configured accordingly.&lt;/p&gt;

&lt;p&gt;As one last step the Policy has to be enabled. This can be done on individual VMs or instances or any where in the hierarchy, up to the provider level. Policies are inherited to their child objects, for example if the Policy is enabled on a specific provider, it automatically applies to all objects found on this provider.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigate to the provider, e.g. &lt;strong&gt;&lt;em&gt;Compute&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Infrastructure&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Providers&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the provider and click on &lt;strong&gt;&lt;em&gt;Policy&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Manage Policies&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/manage-policies.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/manage-policies-300x82.png&#34; alt=&#34;Manage Policies&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check the box next to the Policy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/enable-policy-profile.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/enable-policy-profile-300x274.png&#34; alt=&#34;Enable Policy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;&lt;em&gt;Save&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The icon shows a yellow shield to illustrate the a Policy is enabled&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/provider-policy-enabled.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/provider-policy-enabled-300x77.png&#34; alt=&#34;Provider with enabled Policy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;verify&#34;&gt;Verify&lt;/h1&gt;

&lt;p&gt;To verify the configuration, navigate to a VM or instances on the selected provider. Click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Perform SmartState Analysis&lt;/em&gt;&lt;/strong&gt;. Depending on the performance of the environment, this usually takes up to two minutes. In some environments it can also take much longer (in particular on OpenStack providers).&lt;/p&gt;

&lt;p&gt;Configuration of Smart State is out of scope for this document. There is a knowledge base article &lt;a href=&#34;https://access.redhat.com/articles/435283&#34;&gt;Virtual Machine SmartState Analysis Checklist&lt;/a&gt; with some useful links.&lt;/p&gt;

&lt;p&gt;System is not compliant:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/system-non-compliant.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/system-non-compliant-300x58.png&#34; alt=&#34;System is not compliant&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;System is compliant:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/system-compliant.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/system-compliant-300x61.png&#34; alt=&#34;System is not compliant&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SELinux Compliance Policy</title>
      <link>http://www.jung-christian.de/post/2017/11/continues-integration-with-automate/</link>
      <pubDate>Tue, 10 Oct 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/11/continues-integration-with-automate/</guid>
      <description>

&lt;h1 id=&#34;continuous-integration-with-cloudforms-or-manageiq-automate&#34;&gt;Continuous Integration with CloudForms or ManageIQ Automate&lt;/h1&gt;

&lt;p&gt;CloudForms and ManageIQ have an embedded editor which allows you to write and edit Automate code. This is convenient and easy to use for smaller modifications. As soon as you want to work on larger projects, you probably want more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;history: be able to go back to previous versions of your code&lt;/li&gt;
&lt;li&gt;branches: be able to create branches for test features or specific bug fixes&lt;/li&gt;
&lt;li&gt;better editor: the built in HTML editor is good enough for simple coding, but eventually you might want to use a more sophisticated editor. Popular editors amongst CloudForms users are Sublime, Atom, Visual Studio Code, or maybe just your optimized configuration of VI or Emacs.&lt;/li&gt;
&lt;li&gt;logs: as soon as you collaborate working on Automate code, you want to be able to see how did which change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Automate code can not only be written in the built in HTML editor, it can also be imported from a Git repository. For continuous integration, the REST API can be used to trigger a refresh every time new code is committed.&lt;/p&gt;

&lt;h1 id=&#34;the-setup&#34;&gt;The setup&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;http://gitlab.com&#34;&gt;GitLab&lt;/a&gt; are probably the most popular tools for Open Source Source Code Management tools currently used. The example below will work with either one of them, and should also work with any Git/CI combination, but might require some additional steps.&lt;/p&gt;

&lt;p&gt;For the example below, GitLab is used, since it has builtin CI/CD features. If you prefer GitHub, the following instructions should work as well, but you might need an additional tool, for example &lt;a href=&#34;http://www.travis-ci.org&#34;&gt;Travis CI&lt;/a&gt;, for the CI part.&lt;/p&gt;

&lt;p&gt;Every time new code is committed to the Git repository, a CI/CD Tool will detect that change and use an CloudForms API call to trigger a refresh. As a consequence, the script which is running on the CI/CD server must be able to open a TCP connection on port 443 to the CloudForms appliance by using its IP address or DNS name.&lt;/p&gt;

&lt;h1 id=&#34;adding-a-git-repository&#34;&gt;Adding a Git repository&lt;/h1&gt;

&lt;p&gt;Create your Git repository with your Automate code. It is easier if you start with an existing repository, which actually already has some code checked in.&lt;/p&gt;

&lt;p&gt;Before you can add a Git repository, the necessary role has to be enabled. Click on the top right menu which shows your user name and then &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;. Make sure you enable the &amp;ldquo;Git Repositories Owner&amp;rdquo; role (you might have to scroll down to see all the roles, depending on your screen resolution).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;enable-git-repo-role.png&#34;&gt;&lt;img src=&#34;images/enable-git-repo-role-300x138.png&#34; alt=&#34;Enable Git Repositories Role&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can take a few moments for the services to start in the background.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Import/Export&lt;/em&gt;&lt;/strong&gt;. If the submit button is still greyed out, the role has not been activated yet. The question mark icon next to the submit button will give you an according hint. in this case wait another minute and reload the page.&lt;/p&gt;

&lt;p&gt;From your Git repository, copy the HTML URL (SSH will not work). Paste the URL into the &amp;ldquo;Git URL&amp;rdquo; field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; A Git URL is pointing to a file with the suffix .git. For example, the Git URL for the repository used for this example is &lt;a href=&#34;https://gitlab.com/cjung/automate.git&#34;&gt;https://gitlab.com/cjung/automate.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Username and Password are optional, as indicated in the UI. If you have a public repository on GitLab or GitHub, you will not need it. For private repositories, the user credentials have to be provided. CloudForms or ManageIQ will only need privileges to pull code, so a read only account is enough.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/git-repo-credentials.png&#34;&gt;&lt;img src=&#34;images/git-repo-credentials-300x285.png&#34; alt=&#34;Provide details for Git repository&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on &lt;strong&gt;&lt;em&gt;Submit&lt;/em&gt;&lt;/strong&gt; it can take a few seconds before you see the next screen. During this delay, CloudForms/ManageIQ will try to access the repository and check if it can find an valid Automate repository.&lt;/p&gt;

&lt;p&gt;If successful, the next screen will allow you to chose which tag or branch you want to checkout. For this example, we use the master branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/select-branch-or-tag-300x160.png&#34;&gt;1&lt;a href=&#34;images/select-branch-or-tag.png&#34;&gt;Select Branch or Tag&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The import can once more take a few seconds, after which you should get a message, the import was successful.&lt;/p&gt;

&lt;h2 id=&#34;verify-the-new-automate-domain&#34;&gt;Verify the new Automate domain&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt; to see the domain after the import. Note that the domain is always read only. Code has to be changed in Git and can not be changed in the builtin editor anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/git-domain-300x65.png&#34;&gt;&lt;img src=&#34;images/git-domain.png&#34; alt=&#34;Automate Domain coming from Git&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on the Domain, a refresh can be initiated from the &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; menu and &lt;strong&gt;&lt;em&gt;Refresh with new branch or tag&lt;/em&gt;&lt;/strong&gt;. This can also be used to change the branch or tag used to retrieve the code from Git.&lt;/p&gt;

&lt;h1 id=&#34;create-a-locked-down-role&#34;&gt;Create a locked down role&lt;/h1&gt;

&lt;p&gt;So far we have manually imported Automate code from an existing Git repository. For a continuous integration workflow, we need an automatism to update the code in CloudForms, every time we commit a change to Git.&lt;/p&gt;

&lt;p&gt;To be able to accomplish this, we need a user with the necessary privileges to refresh the Automate domain. This user has to log into CloudForms and perform a refresh by sending an API call.&lt;/p&gt;

&lt;p&gt;For security reasons, it is advised to create an account with restricted privileges. Fortunately CloudForms allows us to create a user which can only perform a refresh, but no other action.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; by clicking on your username on the top right corner and click on &lt;strong&gt;&lt;em&gt;Access control&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;strong&gt;&lt;em&gt;Roles&lt;/em&gt;&lt;/strong&gt; and open the &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; menu and &lt;strong&gt;&lt;em&gt;Add a new Role&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Give the new role a name, for example &amp;ldquo;Git&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disable all privileges by making sure the box next to &amp;ldquo;Everything&amp;rdquo; is disabled&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drill into &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate Domains&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Modify&lt;/em&gt;&lt;/strong&gt; and enable &lt;strong&gt;&lt;em&gt;Refresh&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/only-enable-automate-refresh-300x341.png&#34;&gt;&lt;img src=&#34;images/only-enable-automate-refresh.png&#34; alt=&#34;Only enable Automate Refresh privilege&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the new role&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Groups&lt;/em&gt;&lt;/strong&gt;, click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Add a new Group&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter a description, for example &amp;ldquo;Git&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the previously created role in the &amp;ldquo;Role&amp;rdquo; drop down list&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the parent tenant&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/add-git-group-300x159.png&#34;&gt;&lt;img src=&#34;images/add-git-group.png&#34; alt=&#34;Add the new group&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the new group&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Last but not least, navigate to &lt;strong&gt;&lt;em&gt;Users&lt;/em&gt;&lt;/strong&gt; and click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Add a new User&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in the fields for &amp;ldquo;Full Name&amp;rdquo; and &amp;ldquo;Username&amp;rdquo;, also set a password for the new user. Make sure to remember the username and password, since you will need both later. The email address is optional.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure to select the previously created group in the &amp;ldquo;Group&amp;rdquo; drop down list&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/add-git-user-300x259.png&#34;&gt;&lt;img src=&#34;images/add-git-user.png&#34; alt=&#34;Add the new user&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the new User.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;build-a-ci-pipeline&#34;&gt;Build a CI pipeline&lt;/h1&gt;

&lt;p&gt;The final piece in the puzzle is the script which is executed on the CI/CD server which triggers CloudForms to refresh the Automate domain.&lt;/p&gt;

&lt;h2 id=&#34;gitlab&#34;&gt;GitLab&lt;/h2&gt;

&lt;p&gt;This example is using GitLab:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create a new file called &amp;ldquo;.gitlab-ci.yml&amp;rdquo; in the root directory of the git repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;job1:
  script:
    - curl -k -X POST -d&#39;{&amp;quot;action&amp;quot;:&amp;quot;refresh_from_source&amp;quot;}&#39; https://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;FQDN or IP of CloudForms Appliance&amp;gt;/api/automate_domains/&amp;lt;name of Automate domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;travis-ci&#34;&gt;Travis CI&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create a new file called &amp;ldquo;.travis.yml&amp;rdquo; in the root directory of the git repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;language: ruby

script:
- curl -k -X POST -d&#39;{&amp;quot;action&amp;quot;:&amp;quot;refresh_from_source&amp;quot;}&#39; https://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;FQDN or IP of CloudForms Appliance&amp;gt;/api/automate_domains/&amp;lt;name of Automate domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;save the file and commit it to the repository&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;

&lt;p&gt;After committing the build script, you can start doing changes to your Automate repository. Every time you commit a change, the build script should be executed and refresh the Automate domain.&lt;/p&gt;

&lt;p&gt;Note that it can take a few seconds unless the CI/CD server detects the change and they show up in CloudForms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SmartProxy Affinity</title>
      <link>http://www.jung-christian.de/post/2017/02/smart-proxy-affinity/</link>
      <pubDate>Thu, 23 Feb 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/02/smart-proxy-affinity/</guid>
      <description>

&lt;h1 id=&#34;smartstate-analysis&#34;&gt;SmartState Analysis&lt;/h1&gt;

&lt;p&gt;CloudForms and ManageIQ can collect information from the configured providers to build its internal inventory. For virtual machines or instances this includes information like the name, associated IP addresses, virtual hardware specification and many more. Additional information can be retrieved by executing a &lt;em&gt;SmartState Analysis&lt;/em&gt;. SmartState is implemented agentless and uses temporary snapshots to analyze virtual machines and templates.&lt;/p&gt;

&lt;p&gt;To collect the information from VMware, the VDDK library has to be installed on all applicable appliances manually. For CloudForms there is a &lt;a href=&#34;https://access.redhat.com/articles/2078103&#34;&gt;knowledge base article&lt;/a&gt; which describes the setup process in detail.&lt;/p&gt;

&lt;h1 id=&#34;zones-and-regions&#34;&gt;Zones and Regions&lt;/h1&gt;

&lt;p&gt;When designing large deployments, multiple appliances are usually deployed. Zones and regions make it possible to implement security isolation and to distribute actions between multiple appliances. SmartState Analysis is comprised of two roles which can be enabled or disabled on each individual appliance. Details about roles can be found in the &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_cloudforms/4.2/html/general_configuration/configuration#servers&#34;&gt;General Configuration&lt;/a&gt; Guide.&lt;/p&gt;

&lt;h1 id=&#34;role-assignment&#34;&gt;Role assignment&lt;/h1&gt;

&lt;p&gt;When a user requests a SmartState Analysis to be performed, ManageIQ or CloudForms tries to assign the job to an appropriate appliance. It&amp;rsquo;s using the information about the regions and zones and tries to find an appliance which is in the same zone as the provider on which the virtual machine or instance is located.&lt;/p&gt;

&lt;p&gt;Any appliance which is in the same zone as the parent provider, is eligable to execute the job.&lt;/p&gt;

&lt;h1 id=&#34;smart-proxy-affinity&#34;&gt;Smart Proxy Affinity&lt;/h1&gt;

&lt;p&gt;In some cases the above logic is not ideal. The following is a list of different scenarios, where the automatic assignment is not ideal or not possible. This is not a complete list, just some examples.&lt;/p&gt;

&lt;h2 id=&#34;no-appliance-is-in-the-appropriate-zone&#34;&gt;No appliance is in the appropriate zone&lt;/h2&gt;

&lt;p&gt;To make the described logic work, at least one appliance has to be in the same zone as the provider on which the VM or instance is located. For small providers (for example test environments) it might not be necessary to have dedicated appliances, so this provider has to be managed by appliances which are in the same zone, but not running on the same provider.&lt;/p&gt;

&lt;h2 id=&#34;openstack-best-practice&#34;&gt;OpenStack best practice&lt;/h2&gt;

&lt;p&gt;For OpenStack OverCloud and UnderCloud providers, it is often considered best practice to run the management infrastructure outside of the OpenStack environment. In such a setup the appliance would run on a different virtual infrastructure, but with the necessary connectivity in place to reach the API endpoints.&lt;/p&gt;

&lt;h2 id=&#34;performance-and-sociability&#34;&gt;Performance and Sociability&lt;/h2&gt;

&lt;p&gt;For very large providers or if a lot of SmartState Analysis jobs are executed, it might be necessary to assign specific appliances to a subset of the infrastructure.&lt;/p&gt;

&lt;h1 id=&#34;affinity-assignment&#34;&gt;Affinity assignment&lt;/h1&gt;

&lt;p&gt;For those few special cases where the normal automatic logic based on zones and regions doesn&amp;rsquo;t work, SmartProxy Affinity can be used to manually assign appliances to specific parts of the infrastructure.&lt;/p&gt;

&lt;p&gt;The configuration can be found by navigating to the configuration menu (click on the user name on the top right menu), on the tree in the left pane, select the zone and then the tab &amp;ldquo;SmartProxy Affinity&amp;rdquo;. It is possible to drill down and enable or disable the affinity for fine grained control.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/ssa-affinity.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/ssa-affinity-300x125.png&#34; alt=&#34;SmartProxy Affinity&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;gotcha&#34;&gt;Gotcha&lt;/h1&gt;

&lt;p&gt;If SmartProxy Affinity assignments are used, changes of the infrastructure will require the settings to be updated. For example if a new datastore or hypervisor is added, none of the appliances will be assigned until the configuration is updated.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>