<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christian&#39;s Blog</title>
    <link>http://www.jung-christian.de/tags/automate/index.xml</link>
    <description>Recent content on Christian&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017 by Christian Jung</copyright>
    <atom:link href="http://www.jung-christian.de/tags/automate/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Continuous Integration with CloudForms or ManageIQ</title>
      <link>http://www.jung-christian.de/post/2017/11/continuous-integration-with-automate/</link>
      <pubDate>Fri, 10 Nov 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/11/continuous-integration-with-automate/</guid>
      <description>

&lt;h1 id=&#34;purpose-of-this-document&#34;&gt;Purpose of this document&lt;/h1&gt;

&lt;p&gt;CloudForms and ManageIQ have an embedded editor which allows you to write and edit Automate code. This is convenient and easy to use for smaller modifications. As soon as you want to work on larger projects, you probably want more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;history: be able to go back to previous versions of your code&lt;/li&gt;
&lt;li&gt;branches: be able to create branches for test features or specific bug fixes&lt;/li&gt;
&lt;li&gt;better editor: the built in HTML editor is good enough for simple coding, but eventually you might want to use a more sophisticated editor. Popular editors amongst CloudForms users are Sublime, Atom, Visual Studio Code, or maybe just your optimized configuration of VI or Emacs.&lt;/li&gt;
&lt;li&gt;logs: as soon as you collaborate working on Automate code, you want to be able to see how did which change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Automate code can not only be written in the built in HTML editor, it can also be imported from a Git repository. For continuous integration, the REST API can be used to trigger a refresh every time new code is committed.&lt;/p&gt;

&lt;h1 id=&#34;the-setup&#34;&gt;The setup&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;http://gitlab.com&#34;&gt;GitLab&lt;/a&gt; are probably the most popular tools for Open Source Source Code Management tools currently used. The example below will work with either one of them, and should also work with any Git/CI combination, but might require some additional steps.&lt;/p&gt;

&lt;p&gt;For the example below, GitLab is used, since it has builtin CI/CD features. If you prefer GitHub, the following instructions should work as well, but you might need an additional tool, for example &lt;a href=&#34;http://www.travis-ci.org&#34;&gt;Travis CI&lt;/a&gt;, for the CI part.&lt;/p&gt;

&lt;p&gt;Every time new code is committed to the Git repository, a CI/CD Tool will detect that change and use an CloudForms API call to trigger a refresh. As a consequence, the script which is running on the CI/CD server must be able to open a TCP connection on port 443 to the CloudForms appliance by using its IP address or DNS name.&lt;/p&gt;

&lt;h1 id=&#34;adding-a-git-repository&#34;&gt;Adding a Git repository&lt;/h1&gt;

&lt;p&gt;Create your Git repository with your Automate code. It is easier if you start with an existing repository, which actually already has some code checked in.&lt;/p&gt;

&lt;p&gt;Before you can add a Git repository, the necessary role has to be enabled. Click on the top right menu which shows your user name and then &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;. Make sure you enable the &amp;ldquo;Git Repositories Owner&amp;rdquo; role (you might have to scroll down to see all the roles, depending on your screen resolution).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;enable-git-repo-role.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/enable-git-repo-role-300x138.png&#34; alt=&#34;Enable Git Repositories Role&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can take a few moments for the services to start in the background.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Import/Export&lt;/em&gt;&lt;/strong&gt;. If the submit button is still greyed out, the role has not been activated yet. The question mark icon next to the submit button will give you an according hint. in this case wait another minute and reload the page.&lt;/p&gt;

&lt;p&gt;From your Git repository, copy the HTML URL (SSH will not work). Paste the URL into the &amp;ldquo;Git URL&amp;rdquo; field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; A Git URL is pointing to a file with the suffix .git. For example, the Git URL for the repository used for this example is &lt;a href=&#34;https://gitlab.com/cjung/automate.git&#34;&gt;https://gitlab.com/cjung/automate.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Username and Password are optional, as indicated in the UI. If you have a public repository on GitLab or GitHub, you will not need it. For private repositories, the user credentials have to be provided. CloudForms or ManageIQ will only need privileges to pull code, so a read only account is enough.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/git-repo-credentials.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/git-repo-credentials-300x285.png&#34; alt=&#34;Provide details for Git repository&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on &lt;strong&gt;&lt;em&gt;Submit&lt;/em&gt;&lt;/strong&gt; it can take a few seconds before you see the next screen. During this delay, CloudForms/ManageIQ will try to access the repository and check if it can find an valid Automate repository.&lt;/p&gt;

&lt;p&gt;If successful, the next screen will allow you to chose which tag or branch you want to checkout. For this example, we use the master branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/select-branch-or-tag-300x160.png&#34;&gt;1&lt;a href=&#34;http://www.jung-christian.de/images/select-branch-or-tag.png&#34;&gt;Select Branch or Tag&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The import can once more take a few seconds, after which you should get a message, the import was successful.&lt;/p&gt;

&lt;h2 id=&#34;verify-the-new-automate-domain&#34;&gt;Verify the new Automate domain&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt; to see the domain after the import. Note that the domain is always read only. Code has to be changed in Git and can not be changed in the builtin editor anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/git-domain-300x65.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/git-domain.png&#34; alt=&#34;Automate Domain coming from Git&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on the Domain, a refresh can be initiated from the &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; menu and &lt;strong&gt;&lt;em&gt;Refresh with new branch or tag&lt;/em&gt;&lt;/strong&gt;. This can also be used to change the branch or tag used to retrieve the code from Git.&lt;/p&gt;

&lt;h1 id=&#34;create-a-locked-down-role&#34;&gt;Create a locked down role&lt;/h1&gt;

&lt;p&gt;So far we have manually imported Automate code from an existing Git repository. For a continuous integration workflow, we need an automatism to update the code in CloudForms, every time we commit a change to Git.&lt;/p&gt;

&lt;p&gt;To be able to accomplish this, we need a user with the necessary privileges to refresh the Automate domain. This user has to log into CloudForms and perform a refresh by sending an API call.&lt;/p&gt;

&lt;p&gt;For security reasons, it is advised to create an account with restricted privileges. Fortunately CloudForms allows us to create a user which can only perform a refresh, but no other action.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; by clicking on your username on the top right corner and click on &lt;strong&gt;&lt;em&gt;Access control&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;strong&gt;&lt;em&gt;Roles&lt;/em&gt;&lt;/strong&gt; and open the &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; menu and &lt;strong&gt;&lt;em&gt;Add a new Role&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Give the new role a name, for example &amp;ldquo;Git&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disable all privileges by making sure the box next to &amp;ldquo;Everything&amp;rdquo; is disabled&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drill into &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate Domains&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Modify&lt;/em&gt;&lt;/strong&gt; and enable &lt;strong&gt;&lt;em&gt;Refresh&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/only-enable-automate-refresh-300x341.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/only-enable-automate-refresh.png&#34; alt=&#34;Only enable Automate Refresh privilege&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the new role&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Groups&lt;/em&gt;&lt;/strong&gt;, click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Add a new Group&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter a description, for example &amp;ldquo;Git&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the previously created role in the &amp;ldquo;Role&amp;rdquo; drop down list&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the parent tenant&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/add-git-group-300x159.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/add-git-group.png&#34; alt=&#34;Add the new group&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the new group&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Last but not least, navigate to &lt;strong&gt;&lt;em&gt;Users&lt;/em&gt;&lt;/strong&gt; and click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Add a new User&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in the fields for &amp;ldquo;Full Name&amp;rdquo; and &amp;ldquo;Username&amp;rdquo;, also set a password for the new user. Make sure to remember the username and password, since you will need both later. The email address is optional.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure to select the previously created group in the &amp;ldquo;Group&amp;rdquo; drop down list&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/add-git-user-300x259.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/add-git-user.png&#34; alt=&#34;Add the new user&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the new User.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;build-a-ci-pipeline&#34;&gt;Build a CI pipeline&lt;/h1&gt;

&lt;p&gt;The final piece in the puzzle is the script which is executed on the CI/CD server which triggers CloudForms to refresh the Automate domain.&lt;/p&gt;

&lt;h2 id=&#34;gitlab&#34;&gt;GitLab&lt;/h2&gt;

&lt;p&gt;This example is using GitLab:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create a new file called &amp;ldquo;.gitlab-ci.yml&amp;rdquo; in the root directory of the git repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;job1:
  script:
    - curl -k -X POST -d&#39;{&amp;quot;action&amp;quot;:&amp;quot;refresh_from_source&amp;quot;}&#39; https://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;FQDN or IP of CloudForms Appliance&amp;gt;/api/automate_domains/&amp;lt;name of Automate domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;travis-ci&#34;&gt;Travis CI&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create a new file called &amp;ldquo;.travis.yml&amp;rdquo; in the root directory of the git repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;language: ruby

script:
- curl -k -X POST -d&#39;{&amp;quot;action&amp;quot;:&amp;quot;refresh_from_source&amp;quot;}&#39; https://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;FQDN or IP of CloudForms Appliance&amp;gt;/api/automate_domains/&amp;lt;name of Automate domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;save the file and commit it to the repository&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;

&lt;p&gt;After committing the build script, you can start doing changes to your Automate repository. Every time you commit a change, the build script should be executed and refresh the Automate domain.&lt;/p&gt;

&lt;p&gt;Note that it can take a few seconds unless the CI/CD server detects the change and they show up in CloudForms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best Practice recommendations for Automate</title>
      <link>http://www.jung-christian.de/post/2017/10/automate-best-practice/</link>
      <pubDate>Tue, 10 Oct 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/10/automate-best-practice/</guid>
      <description>

&lt;h1 id=&#34;purpose-of-this-document&#34;&gt;Purpose of this document&lt;/h1&gt;

&lt;p&gt;The idea of this document is to collaboratively collect coding style recommendations and best practices to give guidance on how to use Automate in &lt;a href=&#34;http://www.redhat.com/cloudforms&#34;&gt;CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following tips are meant for guidance and should give you some hints and ideas on how to do things “the clean way”. There are always exceptions from those rules. This document does not claim to be complete but should provide some recommendations and guidance. Feedback is, as always, very much appreciated.&lt;/p&gt;

&lt;h1 id=&#34;naming-convention&#34;&gt;Naming Convention&lt;/h1&gt;

&lt;h2 id=&#34;name-spaces&#34;&gt;Name spaces&lt;/h2&gt;

&lt;p&gt;To “overload” existing code from other domains it is necessary to keep the structure of name spaces, classes, methods and instances identical. Custom name spaces should follow the existing structure.&lt;/p&gt;

&lt;p&gt;For example integration code into external (third party) software should follow the structure used in the Red Hat/Integration domain.&lt;/p&gt;

&lt;p&gt;Proposed structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ├── ConfigurationManagement (Namespace (NS)
    │   ├── Ansible (Class)
    │   │   ├── instance1
    │   │   ├── instance2
    │   │   ├── method1
    │   │   └── method2
    │   └── Foreman (Class)
    │     ├── create (Instance/Method)
    │     ├── delete (Instance/Method)
    │     ├── read (Instance/Method)
    │     ├── Instance/Method
    │     └── update (Instance/Method)
    ├── RedHat (NS)
    │   ├── OpenStack (NS)
    │   │   ├── Cinder (Class)
    │   │   │   ├── create (Instance/Method)
    │   │   │   ├── delete (Instance/Method)
    │   │   │   ├── read (Instance/Method)
    │   │   │   └── update (Instance/Method)
    │   │   ├── LBaaS (Class)
    │   │   │   ├── create (Instance/Method)
    │   │   │   ├── delete (Instance/Method)
    │   │   │   ├── read (Instance/Method)
    │   │   │   └── update (Instance/Method)
    │   │   └── Snapshots (Class)
    │   │     ├── create (Instance/Method)
    │   │     ├── delete (Instance/Method)
    │   │     ├── read (Instance/Method)
    │   │     └── update (Instance/Method)
    │   ├── RHEV (Class)
    │   └── Satellite (Class)
    └── Vendor (NS)
    ├── Application1 (Class)
    ├── Application2 (Class)
    └── Application3 (Class)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;Miscellaneous tips in &lt;a href=&#34;https://pemcg.gitbooks.io/introduction-to-cloudforms-automation/content/chapter23/miscellaneous_tips.html&#34;&gt;Peter McGowan&amp;rsquo;s Automate Book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instance names and methods should both be snake case, see also the discussion on the the &lt;a href=&#34;http://talk.manageiq.org/t/naming-and-the-style-guide/&#34;&gt;ManageIQ Forum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Developer Guides for &lt;a href=&#34;http://manageiq.org/docs/guides/architecture&#34;&gt;ManageIQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Discussion &lt;a href=&#34;https://github.com/ManageIQ/manageiq-content/issues/8&#34;&gt;Convert Automate Methods to new style using classes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;working-with-domains&#34;&gt;Working with Domains&lt;/h2&gt;

&lt;p&gt;As a basic setup code and configuration details should be split into two domains. E.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Customer-config
    Customer-code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make it easier to reuse the code at other customers or make it available in a source code repository (like git/SVN). Additional domains for staging might be useful in larger deployments.&lt;/p&gt;

&lt;p&gt;Example: (sorted by priority)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Customer-config
    Customer-dev
    Customer-qa
    Customer-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;production&#34;&gt;Production&lt;/h3&gt;

&lt;p&gt;Customer-prod contains already “released” code, this means this domain is a 1:1 copy of the one used in production. In the production environment the -dev and -qa domains don’t exist, are empty or disabled.&lt;/p&gt;

&lt;h3 id=&#34;qa&#34;&gt;QA&lt;/h3&gt;

&lt;p&gt;In the QA or test environment the &amp;ldquo;customer-prod&amp;rdquo; domain contains a 1:1 copy of the production domain, but is overloaded by the -qa domain. This allows testing of QA code in combination with existing production code. After all QA tests have been completed, the QA code moves into the production domain (leaving the QA domain empty).&lt;/p&gt;

&lt;h3 id=&#34;development&#34;&gt;Development&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Development&amp;rdquo; is following the same approach. It contains a 1:1 copy of -prod and -qa domains but is also overloaded by content from the -dev domain. This allows for development work to be based on current production and QA code, By separating -dev into a dedicated domain, the -dev domain can for example temporarily be disabled for root cause analysis or debugging purposes.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;Finally the -config domain contains &lt;em&gt;ALL&lt;/em&gt; configuration data. E.g. host names to external systems, login credentials, environment specific settings. There are dedicated -config domains for each stage which will never coexist (e.g. the -config domain for QA exclusively contains QA specific settings and never uses settings for production). Consequently there is no configuration information in any of the domains listed above.&lt;/p&gt;

&lt;p&gt;Depending on the specific needs more (e.g. Pre-Prod) or less domains (QA might not always be needed) can be used.&lt;/p&gt;

&lt;h1 id=&#34;git-integration&#34;&gt;Git integration&lt;/h1&gt;

&lt;p&gt;Automate Domains can be imported from Git (including but not limited to &lt;a href=&#34;http://gitlab.com&#34;&gt;Gitlab&lt;/a&gt; and &lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt;). The &lt;a href=&#34;http://manageiq.org/docs/api&#34;&gt;REST API&lt;/a&gt; also provides a call to &lt;a href=&#34;http://manageiq.org/docs/reference/latest/api/reference/automate_domains#refresh-from-source&#34;&gt;refresh a specific Automate domain&lt;/a&gt;. This allows the integration with a CI/CD pipeline like Jenkins or Travis. A simple hook script can be used to trigger a refresh of the Automate Domain whenever new code is committed.&lt;/p&gt;

&lt;p&gt;The Role Based Access control can be used to create a specific role which only grants the privilege to trigger a domain refresh:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/automate-refresh-role.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/automate-refresh-role-300x214.png&#34; alt=&#34;RBAC role for Automate refresh&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each Automate domain can be imported from a specific Git repository. CloudForms and ManageIQ also detects branches and tags which allows to be even more flexible.&lt;/p&gt;

&lt;p&gt;More information can be found in the &lt;a href=&#34;http://www.jung-christian.de/post/2017/11/continuous-integration-with-automate/&#34;&gt;Continuous Integration with CloudForms or ManageIQ Automate&lt;/a&gt; post.&lt;/p&gt;

&lt;h1 id=&#34;unit-testing&#34;&gt;Unit Testing&lt;/h1&gt;

&lt;p&gt;Automate methods can usually not be used outside of the context of CloudForms or ManageIQ. To increase code quality and use automated unit tests, it is recommended to write every method generic enough, so it can be called in the context of a state machine, a button, from Simulate and the REST API.&lt;/p&gt;

&lt;p&gt;Since it is now possible to call any method from REST, it is recommended to follow some coding best practices to accomplish this goal. More information can be found in the chapter &lt;a href=&#34;https://pemcg.gitbooks.io/introduction-to-cloudforms-automation/content/chapter10/ways_of_entering_automation.html&#34;&gt;Writing Generic Methods&lt;/a&gt; of the Automate Book. Examples for &lt;a href=&#34;https://pemcg.gitbooks.io/introduction-to-cloudforms-automation/content/chapter20/calling_automation_from_api.html&#34;&gt;using the REST API to call Automate&lt;/a&gt; can be found as well.&lt;/p&gt;

&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;Obviously some methods in Automate will not be able to do any reasonable tests without the appropriate context (e.g. a method which is used during provisioning can probably not provide a reasonable unit test if called without the context of a provisioned VM. )&lt;/p&gt;

&lt;h1 id=&#34;code-documentation-with-rdoc&#34;&gt;Code Documentation with RDoc&lt;/h1&gt;

&lt;p&gt;RDoc is part of Ruby and can automatically create documentation based on existing Ruby code. It analysis the code and tries to build the proper structure and relationships automatically.&lt;/p&gt;

&lt;p&gt;The use of RDoc in the context of Automate is somewhat limited though. Although CloudForms and ManageIQ are using Namespaces and Classes, this information is stored in YAML files and can not automatically be used by RDoc when it creates the documentation.&lt;/p&gt;

&lt;p&gt;In conclusion RDoc can still be used to create automated documentation, but requires some discipline from the developer and will not be able to automatically detect the namespace and class structure of Automate.&lt;/p&gt;

&lt;p&gt;More information about RDoc can be found in the &lt;a href=&#34;http://ruby-doc.org/stdlib-1.8.7/libdoc/rdoc/rdoc/index.html&#34;&gt;Ruby Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Call a script from a Control Policy</title>
      <link>http://www.jung-christian.de/post/2017/01/call-script-from-control-policy/</link>
      <pubDate>Tue, 17 Jan 2017 22:14:29 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/01/call-script-from-control-policy/</guid>
      <description>

&lt;h1 id=&#34;control-and-compliance-policies&#34;&gt;Control and Compliance Policies&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://redhat.com/cloudforms&#34;&gt;Red Hat CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; allow users to create control and compliance policies to enforce compliance checks on the Cloud, IaaS and PaaS environment. There is &lt;a href=&#34;http://manageiq.org/docs/reference/latest/doc-Policies_and_Profiles_Guide/miq/&#34;&gt;Documentation&lt;/a&gt; available on how to create and manage Policies, so this post will skip going into further details on that.&lt;/p&gt;

&lt;p&gt;With such a policy very powerful rules can be created and enabled. Sometimes a very simple example is all you need though. I&amp;rsquo;ve been asked several times how we could call a simple shell script or execute any command triggered by a control or compliance policy and this post should help to shed some light on it.&lt;/p&gt;

&lt;h1 id=&#34;automate-method-to-run-a-system-command&#34;&gt;Automate Method to run a system command&lt;/h1&gt;

&lt;p&gt;First we need a method which we can call from a Control Policy. You can import my &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/Automate&#34;&gt;Automate Datastore from Github&lt;/a&gt;. You can find a method which calls a System Command in cjung-git/Control/Methods/run_script.&lt;/p&gt;

&lt;p&gt;The interesting part is just this one line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;system(&amp;quot;/bin/rpm -q cfme &amp;amp;&amp;gt; /tmp/cfme-release.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This examples queries the system for the installed version of the CFME package and writes the result into a file in /tmp called cfme-release.txt. You could replace the system command with anything you want. Keep in mind though, that you can not user interactive commands which are asking for user input.&lt;/p&gt;

&lt;h1 id=&#34;creating-a-control-policy&#34;&gt;Creating a Control Policy&lt;/h1&gt;

&lt;p&gt;CloudForms has two types of Policies. Control Policies consist of an &lt;strong&gt;Event&lt;/strong&gt; which triggers the policy, a &lt;strong&gt;Condition&lt;/strong&gt; which has to be met and an &lt;strong&gt;Action&lt;/strong&gt; which will be performed.&lt;/p&gt;

&lt;p&gt;Compliance Policies are slightly different. They are not trigered by an event and the result (compliant or not compliant) will be shown in the details of the affected object, for example a virtual machine. Control Policies can trigger a compliance check and the results of a compliance check can trigger a control policy.&lt;/p&gt;

&lt;p&gt;For this example, we create a simple Compliance Policy.&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-action&#34;&gt;Create a new Action&lt;/h2&gt;

&lt;p&gt;To be able to call our system command, we need to create a new action. Navigate to Control, Explorer, Actions and click Configuration, Add a new action. We want o run our own piece of code which is executed from Automate, so we have to select &amp;ldquo;Invoke a Custom Automation&amp;rdquo;. As usual, give your action a reasonable name.&lt;/p&gt;

&lt;p&gt;In the Custom Automation fields which just appeared, we need to tell the system which action to perform. The Automate Datastore which you just imported has an Request defined which is called &amp;ldquo;run_script&amp;rdquo;. This has to go into the Request field. The message is in most cases &amp;ldquo;create&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If you want to lean more about Automate, check out the book &lt;a href=&#34;https://access.redhat.com/mastering-cloudforms-automation&#34;&gt;&amp;ldquo;Master CloudForms Automation&amp;rdquo;&lt;/a&gt; - which also applies to ManageIQ.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/add-new-action.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/add-new-action-300x195.png&#34; alt=&#34;Add new Action&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;create-new-policy&#34;&gt;Create new Policy&lt;/h2&gt;

&lt;p&gt;Navigate to Control, Explorer, Policies and select &amp;ldquo;VM Compliant Policies&amp;rdquo;. In the Configuration Menu click select add a new policy. Choose a reasonable name.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/control-policy-system-command.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/control-policy-system-command-300x145.png&#34; alt=&#34;Add Compliance Policy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>