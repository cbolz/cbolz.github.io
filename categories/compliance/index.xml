<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christian&#39;s Blog</title>
    <link>http://www.jung-christian.de/categories/compliance/index.xml</link>
    <description>Recent content on Christian&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017 by Christian Jung</copyright>
    <atom:link href="http://www.jung-christian.de/categories/compliance/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Enforce SELinux Compliance Policy with Ansible</title>
      <link>http://www.jung-christian.de/post/2017/12/enforce-selinux-with-ansible/</link>
      <pubDate>Thu, 14 Dec 2017 12:00:00 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/12/enforce-selinux-with-ansible/</guid>
      <description>

&lt;h1 id=&#34;enforce-compliance&#34;&gt;Enforce Compliance&lt;/h1&gt;

&lt;p&gt;In a recent article about how to write a &lt;a href=&#34;http://www.jung-christian.de/post/2017/10/control-policy-selinux/&#34;&gt;SELinux Compliance Policy&lt;/a&gt; you learned how to use &lt;a href=&#34;http://www.redhat.com/cloudforms&#34;&gt;CloudForms&lt;/a&gt;&amp;rsquo; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt;&amp;rsquo;s capability to perform compliance checks. This article goes one step further: Instead of just reporting compliance or non-compliance of a given virtual machine, we use the power of Ansible to enforce compliance.&lt;/p&gt;

&lt;p&gt;This example builds on the Compliance and Control policy described in the mentioned article and it is recommended to read it first.&lt;/p&gt;

&lt;h1 id=&#34;compliance-policies&#34;&gt;Compliance Policies&lt;/h1&gt;

&lt;p&gt;Enterprises often have rules and regulations about system compliance. This could include a specific baseline configuration, for example hardening rules. It could also include other requirements, like backup and monitoring has to be configured, a proper license has to be available (particularly with proprietary software) and more. Compliance checks in CloudForms and ManageIQ can bundle these requirements into policy profiles.&lt;/p&gt;

&lt;p&gt;If one or more of the requirements is not met, actions can be triggered. The most obvious and most simple to implement is to mark the system as being &amp;ldquo;non compliant&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/system-non-compliant.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/system-non-compliant-300x58.png&#34; alt=&#34;System is not compliant&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compliance policies can also trigger other actions, including running an Ansible Playbook or perform a custom method, which allows us to run our own (Ruby) Method as an action.&lt;/p&gt;

&lt;h1 id=&#34;ansible-playbook-as-an-action&#34;&gt;Ansible Playbook as an Action&lt;/h1&gt;

&lt;p&gt;Coming back to the problem at hand, an error in the SELinux configuration, Ansible would be the logical tool choice to fix the system configuration. There are two options available to run Ansible Playbooks from CloudForms or ManageIQ:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Embedded Ansible: Since &lt;a href=&#34;http://www.redhat.com&#34;&gt;CloudForms 4.5&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ Fine&lt;/a&gt; there a built in native capability to run Ansible Playbooks&lt;/li&gt;
&lt;li&gt;Ansible Tower: Since &lt;a href=&#34;http://www.redhat.com&#34;&gt;CloudForms 4.1&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ Darga&lt;/a&gt; we can run Ansible Playbook from &lt;a href=&#34;https://www.ansible.com/tower&#34;&gt;Ansible Tower&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-ansible-playbook-from-tower&#34;&gt;Running Ansible Playbook from Tower&lt;/h2&gt;

&lt;p&gt;A GitLab repository with &lt;a href=&#34;https://gitlab.com/cjung/cloudforms-playbooks.git&#34;&gt;CloudForms Ansible Playbooks&lt;/a&gt; optimized for the usage with CloudForms and ManageIQ has to be added to Tower first. This repository contains a Playbooks called &amp;ldquo;&lt;a href=&#34;https://gitlab.com/cjung/cloudforms-playbooks/raw/master/Playbooks/selinux-enforcing.yaml&#34;&gt;selinux-enforcing&lt;/a&gt;&amp;rdquo; which makes sure the SELinux modus is set to &amp;ldquo;Enforcing&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;After adding the repository and running an initial sync, a Job Template has to be created, which runs the previously imported Playbook. Make sure the following requirements are met:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Job Template Name: make sure you use the name &amp;ldquo;Fix SELinux&amp;rdquo;. If you want to use another name, the Compliance Policy imported later, has to be adjusted accordingly&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Prompt on Launch&amp;rdquo; for the Limit parameter: During Playbook execution CloudForms or ManageIQ will set the limit parameter dynamically to the correct value to ensure the Playbook is only executed on the non compliant system and not the entire inventory. If this box is not checked (enabled), the limit parameter set by CloudForms or ManageIQ will be ignored by Ansible Tower - and the Playbook will be executed on the entire inventory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we force an update of the Ansible Tower inventory. Navigate to &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Ansible Tower&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt;. Select your Tower Provider and click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Refresh Relationships and Power State&lt;/em&gt;&lt;/strong&gt;. Such a refresh is executed in the background and can take a minute or two. Eventually the new Job Template should show up in the accordion on the left.&lt;/p&gt;

&lt;h3 id=&#34;create-a-new-action&#34;&gt;Create a new Action&lt;/h3&gt;

&lt;p&gt;To trigger an execution of an Ansible Playbook from a Control or Compliance Policy, we first have to create a new Action. Navigate to &lt;strong&gt;&lt;em&gt;Control&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt;. In the accordion on the left, click on &lt;strong&gt;&lt;em&gt;Actions&lt;/em&gt;&lt;/strong&gt; and from there &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Add a new Action&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Description: Fix SELinux&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Action Type: Invoke a Custom Automation&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Message: create&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Request: ansible_tower_job&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Attribute 1: job_template_name&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Value 1: Fix SElinux&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; The Name &amp;ldquo;Fix SELinux&amp;rdquo; has to match the name of the Job Template definition in Ansible Tower, or the Action will fail.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/create-action-fix-selinux.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/create-action-fix-selinux-300x114.png&#34; alt=&#34;Create Fix SELinux Action&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;running-ansible-playbook-natively&#34;&gt;Running Ansible Playbook natively&lt;/h2&gt;

&lt;p&gt;If you want to use the native support to run Ansible Playbooks, it&amp;rsquo;s important to make sure the Embedded Ansible Role is enabled. Without this Role properly running, Ansible Playbooks can not be executed and it is not even possible to add an Ansible Playbook Repository. A good article summarizing the how to &lt;a href=&#34;https://cloudformsblog.redhat.com/2017/12/07/debugging-ansible-automation-inside-red-hat-cloudforms/&#34;&gt;Debug Ansible Automation inside Red Hat CloudForms&lt;/a&gt; has just been published by my buddy &lt;a href=&#34;https://twitter.com/victorestival&#34;&gt;Victor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After ensuring the Role is properly configured, add the &lt;a href=&#34;https://gitlab.com/cjung/cloudforms-playbooks.git&#34;&gt;CloudForms Ansible Playbooks&lt;/a&gt; repository found on GitLab.&lt;/p&gt;

&lt;p&gt;This blog post is not going into details on how to do this. I already created a lab called &lt;a href=&#34;https://github.com/cbolz/rhte-fy18/blob/master/getting-well-with-cloudforms/index.md&#34;&gt;Getting well with CloudForms&lt;/a&gt; which covers the embedded Ansible capbilities.&lt;/p&gt;

&lt;h1 id=&#34;updating-the-compliance-policy&#34;&gt;Updating the Compliance Policy&lt;/h1&gt;

&lt;p&gt;To use the previously created Action in the Compliance Policy, navigate to &lt;strong&gt;&lt;em&gt;Control&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt; first. Then navigate to the Compliance Policy and the respective event. Add the Action you created in the previous step to the &amp;ldquo;Order of Actions if ANY Conditions are False&amp;rdquo; list.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/list-of-actions-selinux-policy.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/list-of-actions-selinux-policy-300x78.png&#34; alt=&#34;Updated actions on fail&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I uploaded an example &lt;a href=&#34;https://raw.githubusercontent.com/cbolz/ManageIQ/master/control-policies/VM-Security-Profile-with-Ansible-Action.yaml&#34;&gt;VM-Security-Profile-with-Ansible-Action&lt;/a&gt; on &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/control-policies&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;testing-and-conclusion&#34;&gt;Testing and Conclusion&lt;/h1&gt;

&lt;p&gt;You should now have a combination of the following poclies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A Control Policy &amp;ldquo;Run SmartState&amp;rdquo; which will schedule a Smart State Analysis scan in the background if a VM is powered on or reset&lt;/li&gt;
&lt;li&gt;A Control Policy &amp;ldquo;Check Compliance&amp;rdquo; which will trigger a Compliance Check every time a VM completed Smart State Analysis&lt;/li&gt;
&lt;li&gt;A Compliance Policy &amp;ldquo;Check SELinux Policy&amp;rdquo; which verifies SELinux is configured in Enforcing mode, and if not, marks the VM as non compliant and runs an Ansible Playbook to fix the configuration error&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To do a test run, you can either power on a VM, or &amp;ldquo;Perform Smart State Analysis&amp;rdquo; from the VM &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; menu.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SELinux Compliance Policy</title>
      <link>http://www.jung-christian.de/post/2017/10/control-policy-selinux/</link>
      <pubDate>Tue, 10 Oct 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/10/control-policy-selinux/</guid>
      <description>

&lt;h1 id=&#34;compliance-policies&#34;&gt;Compliance Policies&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.redhat.com/cloudforms&#34;&gt;CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; allow the definition of Compliance Policies which can be used to verify consistency of Virtual Machines, Instances, Hypervisors and other objects, in the entire environment. Compliance Policies can  trigger actions to be able to notify about non-compliance or to go one step further and enforce compliance, for example by using Ansible Playbooks to fix the problem.&lt;/p&gt;

&lt;p&gt;There are a number of examples about Compliance Policies on the &lt;a href=&#34;http://cloudformsblog.redhat.com/tag/compliance/&#34;&gt;official Red Hat CloudForms blog&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;adjust-the-smart-state-analysis-profile&#34;&gt;Adjust the Smart State Analysis Profile&lt;/h1&gt;

&lt;p&gt;A separate blog post goes into details on how to &lt;a href=&#34;../modify-ssa-profile/&#34;&gt;create and modify a Smart State Analysis Profile&lt;/a&gt;. When creating the profile, it is important its name is &amp;ldquo;default&amp;rdquo; and the policy retrieves the content of the file /etc/sysconfig/selinux.&lt;/p&gt;

&lt;h1 id=&#34;control-policies&#34;&gt;Control Policies&lt;/h1&gt;

&lt;p&gt;Policies in CloudForms and ManageIQ are always a combination of three items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event: the event triggers the evaluation of the condition. An event can be something like &amp;ldquo;VM Power On&amp;rdquo;, &amp;ldquo;Analysis completed&amp;rdquo; and many more. A list of out of the box events can be found by clicking on &lt;strong&gt;&lt;em&gt;Control&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt;, and then clicking on &lt;strong&gt;&lt;em&gt;Events&lt;/em&gt;&lt;/strong&gt; in the accordion on the left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/list-of-events.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/list-of-events-300x96.png&#34; alt=&#34;out of the box events&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The screenshot only shows a subset of all available events.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Condition: the condition is evaluated after the specified event was detected. A condition can verify that a specific Operating System is installed, the VM configuration meets certain criteria and many more&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Action: after detecting the event and validating the condition, an action can be triggered. Actions can be specified differently if the condition was TRUE or FALSE. A Control Policy can can send an email alert, trigger a SNMP trap or any customized action. A number of actions are already shipped out of the box and can be found by clicking on &lt;strong&gt;&lt;em&gt;Control&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt; and then &lt;strong&gt;&lt;em&gt;Actions&lt;/em&gt;&lt;/strong&gt; in the accordion on the left&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/list-of-actions.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/list-of-actions-300x95.png&#34; alt=&#34;list of actions&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The screenshot only shows a subset of all available actions.&lt;/p&gt;

&lt;h1 id=&#34;compliance-policies-1&#34;&gt;Compliance Policies&lt;/h1&gt;

&lt;p&gt;Compliance policies are similar to Control Policies, but do not listen to events. To validate a Compliance Policy, the user can click on &lt;strong&gt;&lt;em&gt;Policy&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Check Compliance of Last Known Configuration&lt;/em&gt;&lt;/strong&gt;, or a Control Policy can trigger an Compliance Policy Check as an Action.&lt;/p&gt;

&lt;p&gt;Compliance Policies can also mark the evaluated object as either Compliant or Non-Compliant. This information can also be used in Reports and Dashboards for a better overview or to be exported for further analysis. More information about Control and Compliance Policies can be found in the &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_cloudforms/4.5/html/policies_and_profiles_guide/&#34;&gt;Policies and Profiles Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;create-a-compliance-policy-for-selinux&#34;&gt;Create a Compliance Policy for SELinux&lt;/h1&gt;

&lt;p&gt;To check if SELinux is in enforcing mode, a compliance policy like this can be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Condition: analyse the content of /etc/sysconfig/selinux and verify &amp;ldquo;SELinux=enforcing&amp;rdquo; is found in the file&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Action: mark the VM as compliant or non-compliant&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of such a policy can be found on &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/control-policies&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;enable-the-policy&#34;&gt;Enable the Policy&lt;/h1&gt;

&lt;p&gt;To enable the Compliance Policy, it has to be part of a Policy Profile. The example found on &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/control-policies&#34;&gt;Github&lt;/a&gt; is pre-configured accordingly.&lt;/p&gt;

&lt;p&gt;As one last step the Policy has to be enabled. This can be done on individual VMs or instances or any where in the hierarchy, up to the provider level. Policies are inherited to their child objects, for example if the Policy is enabled on a specific provider, it automatically applies to all objects found on this provider.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigate to the provider, e.g. &lt;strong&gt;&lt;em&gt;Compute&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Infrastructure&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Providers&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the provider and click on &lt;strong&gt;&lt;em&gt;Policy&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Manage Policies&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/manage-policies.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/manage-policies-300x82.png&#34; alt=&#34;Manage Policies&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check the box next to the Policy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/enable-policy-profile.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/enable-policy-profile-300x274.png&#34; alt=&#34;Enable Policy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;&lt;em&gt;Save&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The icon shows a yellow shield to illustrate the a Policy is enabled&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/provider-policy-enabled.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/provider-policy-enabled-300x77.png&#34; alt=&#34;Provider with enabled Policy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;verify&#34;&gt;Verify&lt;/h1&gt;

&lt;p&gt;To verify the configuration, navigate to a VM or instances on the selected provider. Click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Perform SmartState Analysis&lt;/em&gt;&lt;/strong&gt;. Depending on the performance of the environment, this usually takes up to two minutes. In some environments it can also take much longer (in particular on OpenStack providers).&lt;/p&gt;

&lt;p&gt;Configuration of Smart State is out of scope for this document. There is a knowledge base article &lt;a href=&#34;https://access.redhat.com/articles/435283&#34;&gt;Virtual Machine SmartState Analysis Checklist&lt;/a&gt; with some useful links.&lt;/p&gt;

&lt;p&gt;System is not compliant:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/system-non-compliant.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/system-non-compliant-300x58.png&#34; alt=&#34;System is not compliant&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;System is compliant:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/system-compliant.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/system-compliant-300x61.png&#34; alt=&#34;System is not compliant&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ManageIQ vs CloudForms - what&#39;s the difference</title>
      <link>http://www.jung-christian.de/post/2017/01/manageiq-vs-cloudforms/</link>
      <pubDate>Sun, 29 Jan 2017 22:14:29 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/01/manageiq-vs-cloudforms/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://redhat.com/cloudforms&#34;&gt;Red Hat CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; both recently launched new releases of their software. The latest release of &lt;a href=&#34;https://access.redhat.com/documentation/en/red-hat-cloudforms/4.2/paged/release-notes/&#34;&gt;Red Hat CloudForms is 4.2&lt;/a&gt;, while ManageIQ is following an alphabetical versioning schema and &lt;a href=&#34;http://manageiq.org/blog/2016/12/manageiq-euwe-ga-announcement/&#34;&gt;released Euwe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Red Hat is following an &amp;ldquo;upstream first&amp;rdquo; policy, meaning all new features are developed in the community driven project, in this case ManageIQ. Based on the work of the upstream project, every now and then a supported Red Hat Product is created, in this case Red Hat CloudForms. The most prominent example for this approach is &lt;a href=&#34;https://getfedora.org/&#34;&gt;Fedora&lt;/a&gt; which is the upstream community project for &lt;a href=&#34;https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux&#34;&gt;Red Hat Enterprise Linux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So what&amp;rsquo;s the difference between the upstream community project and the downstream supported product?&lt;/p&gt;

&lt;h1 id=&#34;support&#34;&gt;Support&lt;/h1&gt;

&lt;p&gt;For ManageIQ, there are a number of great ways to get support direclty from the &lt;a href=&#34;http://manageiq.org/community/&#34;&gt;upstream community&lt;/a&gt;. Gitter can be used for chat, there is a forum, links to social media and opportunities to meet face to face at several conferences.&lt;/p&gt;

&lt;p&gt;As a Red Hat customer, you can open &lt;a href=&#34;http://access.redhat.com&#34;&gt;support cases&lt;/a&gt;, search the knowledge base, &lt;a href=&#34;http://www.redhat.com/training/&#34;&gt;train your staff at presence or virtual trainings&lt;/a&gt;, &lt;a href=&#34;http://www.redhat.com/consulting/&#34;&gt;hire consultants&lt;/a&gt; to design and implement your CloudForms environment. There is also a documented &lt;a href=&#34;https://access.redhat.com/support/policy/updates/cloudforms/&#34;&gt;Life Cycle&lt;/a&gt; which allows for better deployment planning.&lt;/p&gt;

&lt;p&gt;Red Hat also performs additional quality assurance before releasing the CloudForms release. Certain features which are not deemed enterprise ready, might be in ManageIQ, but not in CloudForms.&lt;/p&gt;

&lt;p&gt;For Red Hat CloudForms the &lt;a href=&#34;https://access.redhat.com/documentation/en/red-hat-cloudforms/4.2/paged/support-matrix/&#34;&gt;Support Matrix&lt;/a&gt; describes in detail which feature is supported and which isn&amp;rsquo;t. For example, in ManageIQ Euwe includes the capability to manage &lt;a href=&#34;https://github.com/ManageIQ/manageiq/blob/euwe/CHANGELOG.md&#34;&gt;VMware vCloud&lt;/a&gt;, which is currently not listed as being supported in CloudForms.&lt;/p&gt;

&lt;h1 id=&#34;branding&#34;&gt;Branding&lt;/h1&gt;

&lt;p&gt;The branding of the UI, naming of the images and packages, and the documentation are different too. Until recently, Red Hat CloudForms was using &lt;a href=&#34;http://www.adobe.com/&#34;&gt;Adobe Flash&lt;/a&gt; to render certain diagrams and graphs, while ManageIQ was using a JavaScript library to do the same. Starting with version 4.2 of CloudForms, it is using the same library and &lt;a href=&#34;http://www.jung-christian.de/post/2017/01/bye-bye-flash/&#34;&gt;got rid of Flash&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;upgrades&#34;&gt;Upgrades&lt;/h1&gt;

&lt;p&gt;Red Hat CloudForms is a virtual appliances based on Red Hat Enterprise Linux. All software installed in the appliance is packaged in the RPM format. Customers can subscribe to Red Hat Network, Satellite or Update Infrastructure to deploy updates to the appliances.&lt;/p&gt;

&lt;p&gt;ManageIQ virtual appliances are based on &lt;a href=&#34;http://www.centos.org&#34;&gt;CentOS&lt;/a&gt; and the additional software is basically just a git clone. To do an upgrade of the underlying OS, you can just do a &amp;ldquo;yum update&amp;rdquo; as usual, but this will not update the ManageIQ application.&lt;/p&gt;

&lt;p&gt;Each Red Hat CloudForms release also comes with an &lt;a href=&#34;https://access.redhat.com/documentation/en/red-hat-cloudforms/4.2/paged/migrating-to-red-hat-cloudforms-42/&#34;&gt;step-by-step guide&lt;/a&gt; on how to perform upgrades. The &lt;a href=&#34;https://access.redhat.com/support/policy/updates/cloudforms/&#34;&gt;Life Cycle document&lt;/a&gt; helps to understand which upgrades are and will be supported.&lt;/p&gt;

&lt;p&gt;ManageIQ does not have an official Life Cycle document. Upgrades also require &lt;a href=&#34;http://talk.manageiq.org/t/upgrading-from-darga-n-to-darga-n-1/1574/3&#34;&gt;more manual steps&lt;/a&gt; and a better understanding of Ruby, Rails, Linux and how to fix stuff is necessary.&lt;/p&gt;

&lt;h1 id=&#34;automate&#34;&gt;Automate&lt;/h1&gt;

&lt;p&gt;Users and customers can extend the out of the box functionality by adding their own code in what is called &amp;ldquo;Automate&amp;rdquo;. Although both versions ship with the &amp;ldquo;ManageIQ&amp;rdquo; domain, only Red Hat CloudForms comes with an additional &amp;ldquo;Red Hat&amp;rdquo; domain. This domain includes some additional integration examples and optimizations.&lt;/p&gt;

&lt;h1 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h1&gt;

&lt;p&gt;This might not be a complete list of all differences between ManageIQ and CloudForms. It&amp;rsquo;s also - intentionally - not discussiong business value of the subscription and focuses exclusively on the technical characteristics.&lt;/p&gt;

&lt;p&gt;There is also an article about the same topic on the &lt;a href=&#34;http://talk.manageiq.org/t/differences-between-red-hat-cloudforms-and-manageiq/728/4&#34;&gt;ManageIQ Forum&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Call a script from a Control Policy</title>
      <link>http://www.jung-christian.de/post/2017/01/call-script-from-control-policy/</link>
      <pubDate>Tue, 17 Jan 2017 22:14:29 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/01/call-script-from-control-policy/</guid>
      <description>

&lt;h1 id=&#34;control-and-compliance-policies&#34;&gt;Control and Compliance Policies&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://redhat.com/cloudforms&#34;&gt;Red Hat CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; allow users to create control and compliance policies to enforce compliance checks on the Cloud, IaaS and PaaS environment. There is &lt;a href=&#34;http://manageiq.org/docs/reference/latest/doc-Policies_and_Profiles_Guide/miq/&#34;&gt;Documentation&lt;/a&gt; available on how to create and manage Policies, so this post will skip going into further details on that.&lt;/p&gt;

&lt;p&gt;With such a policy very powerful rules can be created and enabled. Sometimes a very simple example is all you need though. I&amp;rsquo;ve been asked several times how we could call a simple shell script or execute any command triggered by a control or compliance policy and this post should help to shed some light on it.&lt;/p&gt;

&lt;h1 id=&#34;automate-method-to-run-a-system-command&#34;&gt;Automate Method to run a system command&lt;/h1&gt;

&lt;p&gt;First we need a method which we can call from a Control Policy. You can import my &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/Automate&#34;&gt;Automate Datastore from Github&lt;/a&gt;. You can find a method which calls a System Command in cjung-git/Control/Methods/run_script.&lt;/p&gt;

&lt;p&gt;The interesting part is just this one line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;system(&amp;quot;/bin/rpm -q cfme &amp;amp;&amp;gt; /tmp/cfme-release.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This examples queries the system for the installed version of the CFME package and writes the result into a file in /tmp called cfme-release.txt. You could replace the system command with anything you want. Keep in mind though, that you can not user interactive commands which are asking for user input.&lt;/p&gt;

&lt;h1 id=&#34;creating-a-control-policy&#34;&gt;Creating a Control Policy&lt;/h1&gt;

&lt;p&gt;CloudForms has two types of Policies. Control Policies consist of an &lt;strong&gt;Event&lt;/strong&gt; which triggers the policy, a &lt;strong&gt;Condition&lt;/strong&gt; which has to be met and an &lt;strong&gt;Action&lt;/strong&gt; which will be performed.&lt;/p&gt;

&lt;p&gt;Compliance Policies are slightly different. They are not trigered by an event and the result (compliant or not compliant) will be shown in the details of the affected object, for example a virtual machine. Control Policies can trigger a compliance check and the results of a compliance check can trigger a control policy.&lt;/p&gt;

&lt;p&gt;For this example, we create a simple Compliance Policy.&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-action&#34;&gt;Create a new Action&lt;/h2&gt;

&lt;p&gt;To be able to call our system command, we need to create a new action. Navigate to Control, Explorer, Actions and click Configuration, Add a new action. We want o run our own piece of code which is executed from Automate, so we have to select &amp;ldquo;Invoke a Custom Automation&amp;rdquo;. As usual, give your action a reasonable name.&lt;/p&gt;

&lt;p&gt;In the Custom Automation fields which just appeared, we need to tell the system which action to perform. The Automate Datastore which you just imported has an Request defined which is called &amp;ldquo;run_script&amp;rdquo;. This has to go into the Request field. The message is in most cases &amp;ldquo;create&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If you want to lean more about Automate, check out the book &lt;a href=&#34;https://access.redhat.com/mastering-cloudforms-automation&#34;&gt;&amp;ldquo;Master CloudForms Automation&amp;rdquo;&lt;/a&gt; - which also applies to ManageIQ.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/add-new-action.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/add-new-action-300x195.png&#34; alt=&#34;Add new Action&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;create-new-policy&#34;&gt;Create new Policy&lt;/h2&gt;

&lt;p&gt;Navigate to Control, Explorer, Policies and select &amp;ldquo;VM Compliant Policies&amp;rdquo;. In the Configuration Menu click select add a new policy. Choose a reasonable name.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/control-policy-system-command.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/control-policy-system-command-300x145.png&#34; alt=&#34;Add Compliance Policy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>