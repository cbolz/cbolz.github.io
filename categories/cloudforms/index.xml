<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christian&#39;s Blog</title>
    <link>http://www.jung-christian.de/categories/cloudforms/index.xml</link>
    <description>Recent content on Christian&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017 by Christian Jung</copyright>
    <atom:link href="http://www.jung-christian.de/categories/cloudforms/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Best Practice recommendations for Automate</title>
      <link>http://www.jung-christian.de/post/2017/10/automate-best-practice/</link>
      <pubDate>Tue, 10 Oct 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/10/automate-best-practice/</guid>
      <description>

&lt;h1 id=&#34;purpose-of-this-document&#34;&gt;Purpose of this document&lt;/h1&gt;

&lt;p&gt;The idea of this document is to collaboratively collect coding style recommendations and best practices to give guidance on how to use Automate in &lt;a href=&#34;http://www.redhat.com/cloudforms&#34;&gt;CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following tips are meant for guidance and should give you some hints and ideas on how to do things “the clean way”. There are always exceptions from those rules. This document does not claim to be complete but should provide some recommendations and guidance. Feedback is, as always, very much appreciated.&lt;/p&gt;

&lt;h1 id=&#34;naming-convention&#34;&gt;Naming Convention&lt;/h1&gt;

&lt;h2 id=&#34;name-spaces&#34;&gt;Name spaces&lt;/h2&gt;

&lt;p&gt;To “overload” existing code from other domains it is necessary to keep the structure of name spaces, classes, methods and instances identical. Custom name spaces should follow the existing structure.&lt;/p&gt;

&lt;p&gt;For example integration code into external (third party) software should follow the structure used in the Red Hat/Integration domain.&lt;/p&gt;

&lt;p&gt;Proposed structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ├── ConfigurationManagement (Namespace (NS)
    │   ├── Ansible (Class)
    │   │   ├── instance1
    │   │   ├── instance2
    │   │   ├── method1
    │   │   └── method2
    │   └── Foreman (Class)
    │     ├── create (Instance/Method)
    │     ├── delete (Instance/Method)
    │     ├── read (Instance/Method)
    │     ├── Instance/Method
    │     └── update (Instance/Method)
    ├── RedHat (NS)
    │   ├── OpenStack (NS)
    │   │   ├── Cinder (Class)
    │   │   │   ├── create (Instance/Method)
    │   │   │   ├── delete (Instance/Method)
    │   │   │   ├── read (Instance/Method)
    │   │   │   └── update (Instance/Method)
    │   │   ├── LBaaS (Class)
    │   │   │   ├── create (Instance/Method)
    │   │   │   ├── delete (Instance/Method)
    │   │   │   ├── read (Instance/Method)
    │   │   │   └── update (Instance/Method)
    │   │   └── Snapshots (Class)
    │   │     ├── create (Instance/Method)
    │   │     ├── delete (Instance/Method)
    │   │     ├── read (Instance/Method)
    │   │     └── update (Instance/Method)
    │   ├── RHEV (Class)
    │   └── Satellite (Class)
    └── Vendor (NS)
    ├── Application1 (Class)
    ├── Application2 (Class)
    └── Application3 (Class)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;Miscellaneous tips in &lt;a href=&#34;https://pemcg.gitbooks.io/introduction-to-cloudforms-automation/content/chapter23/miscellaneous_tips.html&#34;&gt;Peter McGowan&amp;rsquo;s Automate Book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instance names and methods should both be snake case, see also the discussion on the the &lt;a href=&#34;http://talk.manageiq.org/t/naming-and-the-style-guide/&#34;&gt;ManageIQ Forum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Developer Guides for &lt;a href=&#34;http://manageiq.org/docs/guides/architecture&#34;&gt;ManageIQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Discussion &lt;a href=&#34;https://github.com/ManageIQ/manageiq-content/issues/8&#34;&gt;Convert Automate Methods to new style using classes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;working-with-domains&#34;&gt;Working with Domains&lt;/h2&gt;

&lt;p&gt;As a basic setup code and configuration details should be split into two domains. E.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Customer-config
    Customer-code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make it easier to reuse the code at other customers or make it available in a source code repository (like git/SVN). Additional domains for staging might be useful in larger deployments.&lt;/p&gt;

&lt;p&gt;Example: (sorted by priority)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Customer-config
    Customer-dev
    Customer-qa
    Customer-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;production&#34;&gt;Production&lt;/h3&gt;

&lt;p&gt;Customer-prod contains already “released” code, this means this domain is a 1:1 copy of the one used in production. In the production environment the -dev and -qa domains don’t exist, are empty or disabled.&lt;/p&gt;

&lt;h3 id=&#34;qa&#34;&gt;QA&lt;/h3&gt;

&lt;p&gt;In the QA or test environment the &amp;ldquo;customer-prod&amp;rdquo; domain contains a 1:1 copy of the production domain, but is overloaded by the -qa domain. This allows testing of QA code in combination with existing production code. After all QA tests have been completed, the QA code moves into the production domain (leaving the QA domain empty).&lt;/p&gt;

&lt;h3 id=&#34;development&#34;&gt;Development&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Development&amp;rdquo; is following the same approach. It contains a 1:1 copy of -prod and -qa domains but is also overloaded by content from the -dev domain. This allows for development work to be based on current production and QA code, By separating -dev into a dedicated domain, the -dev domain can for example temporarily be disabled for root cause analysis or debugging purposes.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;Finally the -config domain contains &lt;em&gt;ALL&lt;/em&gt; configuration data. E.g. host names to external systems, login credentials, environment specific settings. There are dedicated -config domains for each stage which will never coexist (e.g. the -config domain for QA exclusively contains QA specific settings and never uses settings for production). Consequently there is no configuration information in any of the domains listed above.&lt;/p&gt;

&lt;p&gt;Depending on the specific needs more (e.g. Pre-Prod) or less domains (QA might not always be needed) can be used.&lt;/p&gt;

&lt;h1 id=&#34;git-integration&#34;&gt;Git integration&lt;/h1&gt;

&lt;p&gt;Automate Domains can be imported from Git (including but not limited to &lt;a href=&#34;http://gitlab.com&#34;&gt;Gitlab&lt;/a&gt; and &lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt;). The &lt;a href=&#34;http://manageiq.org/docs/api&#34;&gt;REST API&lt;/a&gt; also provides a call to &lt;a href=&#34;http://manageiq.org/docs/reference/latest/api/reference/automate_domains#refresh-from-source&#34;&gt;refresh a specific Automate domain&lt;/a&gt;. This allows the integration with a CI/CD pipeline like Jenkins or Travis. A simple hook script can be used to trigger a refresh of the Automate Domain whenever new code is committed.&lt;/p&gt;

&lt;p&gt;The Role Based Access control can be used to create a specific role which only grants the privilege to trigger a domain refresh:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/automate-refresh-role.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/automate-refresh-role-300x214.png&#34; alt=&#34;RBAC role for Automate refresh&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each Automate domain can be imported from a specific Git repository. CloudForms and ManageIQ also detects branches and tags which allows to be even more flexible.&lt;/p&gt;

&lt;p&gt;More information can be found in the [Continuous Integration with CloudForms or ManageIQ Automate]() post.&lt;/p&gt;

&lt;h1 id=&#34;unit-testing&#34;&gt;Unit Testing&lt;/h1&gt;

&lt;p&gt;Automate methods can usually not be used outside of the context of CloudForms or ManageIQ. To increase code quality and use automated unit tests, it is recommended to write every method generic enough, so it can be called in the context of a state machine, a button, from Simulate and the REST API.&lt;/p&gt;

&lt;p&gt;Since it is now possible to call any method from REST, it is recommended to follow some coding best practices to accomplish this goal. More information can be found in the chapter &lt;a href=&#34;https://pemcg.gitbooks.io/introduction-to-cloudforms-automation/content/chapter10/ways_of_entering_automation.html&#34;&gt;Writing Generic Methods&lt;/a&gt; of the Automate Book. Examples for &lt;a href=&#34;https://pemcg.gitbooks.io/introduction-to-cloudforms-automation/content/chapter20/calling_automation_from_api.html&#34;&gt;using the REST API to call Automate&lt;/a&gt; can be found as well.&lt;/p&gt;

&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;Obviously some methods in Automate will not be able to do any reasonable tests without the appropriate context (e.g. a method which is used during provisioning can probably not provide a reasonable unit test if called without the context of a provisioned VM. )&lt;/p&gt;

&lt;h1 id=&#34;code-documentation-with-rdoc&#34;&gt;Code Documentation with RDoc&lt;/h1&gt;

&lt;p&gt;RDoc is part of Ruby and can automatically create documentation based on existing Ruby code. It analysis the code and tries to build the proper structure and relationships automatically.&lt;/p&gt;

&lt;p&gt;The use of RDoc in the context of Automate is somewhat limited though. Although CloudForms and ManageIQ are using Namespaces and Classes, this information is stored in YAML files and can not automatically be used by RDoc when it creates the documentation.&lt;/p&gt;

&lt;p&gt;In conclusion RDoc can still be used to create automated documentation, but requires some discipline from the developer and will not be able to automatically detect the namespace and class structure of Automate.&lt;/p&gt;

&lt;p&gt;More information about RDoc can be found in the &lt;a href=&#34;http://ruby-doc.org/stdlib-1.8.7/libdoc/rdoc/rdoc/index.html&#34;&gt;Ruby Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom Smart State Analysis Profiles</title>
      <link>http://www.jung-christian.de/post/2017/10/modify-ssa-profile/</link>
      <pubDate>Tue, 10 Oct 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/10/modify-ssa-profile/</guid>
      <description>

&lt;h1 id=&#34;about-smart-state-analysis&#34;&gt;About Smart State Analysis&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.redhat.com/cloudforms&#34;&gt;CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; have a feature called &amp;ldquo;Smart State Analysis&amp;rdquo; which allows them to analyse the disk of a Virtual Machine, Instance, Template or Image and retrieve data about the installed Operating System, applications, local groups and users and more. This is implemented completely without the need of additional agents and as a consequence is independent of the VM power state.&lt;/p&gt;

&lt;p&gt;Smart State can be also sued for Containers and Hypervisors, but the following example focuses on Virtual Machines.&lt;/p&gt;

&lt;h1 id=&#34;smart-state-analysis-profiles&#34;&gt;Smart State Analysis Profiles&lt;/h1&gt;

&lt;p&gt;A Smart State Analysis Profile defines which information is retrieved from the Virtual Machine. By default the following information is retrieved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Services: Which services are installed (Works for Windows and Linux including SysV and SystemD)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;User Accounts: Retrieves information about local user and group accounts&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Software: Information about installed applications (on Windows retrieved from the registry, on Linux by running a query against the RPM or dpkg database)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VM Configuration and System: some additional information about the VM&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Administrators can create their own Analysis Profiles and define a list of additional files which should be retrieved. The Profile can either only check for the existence of the specified file, or also retrieve the content of the file.&lt;/p&gt;

&lt;h1 id=&#34;create-a-custom-smart-state-analysis-profile&#34;&gt;Create a custom Smart State Analysis Profile&lt;/h1&gt;

&lt;p&gt;It is very simple to create a customized Profile. Simply copy the out of the box &amp;ldquo;sample&amp;rdquo; Profile and name the copy &amp;ldquo;default&amp;rdquo;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;log into the appliance with administrator privileges&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;navigate to &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; by clicking on the username on the top right corner&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;navigate to &lt;strong&gt;&lt;em&gt;Analysis Profiles&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;simple&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Copy selected analysis profile&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/copy-analysis-profile.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/copy-analysis-profile-300x112.png&#34; alt=&#34;copy analysis profile&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;make sure the copy is called &amp;ldquo;default&amp;rdquo; and check or un-check the appropriate options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/copy-ssa-profile.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/copy-ssa-profile-300x132.png&#34; alt=&#34;name the profile default&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the Profile is not called &amp;ldquo;default&amp;rdquo; it will not be used unless it is explicitly assigned. Read the chapter &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_cloudforms/4.5/html/assigning_a_custom_analysis_profile_to_a_virtual_machine/index&#34;&gt;Assigning a Custom Analysis Profile to a Virtual Machine&lt;/a&gt; in the CloudForms Documentation for more details.&lt;/p&gt;

&lt;h1 id=&#34;modify-the-smart-state-analysis-profile&#34;&gt;Modify the Smart State Analysis Profile&lt;/h1&gt;

&lt;p&gt;To show how this feature works, add an additional file. In the example below, the content of /etc/sysconfig/selinux is retrieved during Smart State Analysis. There is another blog post about &lt;a href=&#34;../control-policy-selinux/&#34;&gt;How to create a Compliance Policy to enforce SELinux mode&lt;/a&gt; illustrating why this can be useful.&lt;/p&gt;

&lt;p&gt;Edit the previously created State Analysis Profile:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;log into the appliance with administrator privileges&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;navigate to &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; by clicking on the username on the top right corner&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;navigate to &lt;strong&gt;&lt;em&gt;Analysis Profiles&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;default&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;click on the tab &lt;strong&gt;&lt;em&gt;file&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add a new line:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Name:&lt;/em&gt;&lt;/strong&gt; /etc/sysconfig/selinux&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Collect Contents?&lt;/em&gt;&lt;/strong&gt; click (check the box)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/add-selinux-to-analysis-profile.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/add-selinux-to-analysis-profile-300x95.png&#34; alt=&#34;Add selinux to Analysis Profile&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;&lt;em&gt;save&lt;/em&gt;&lt;/strong&gt; on the right in the same row of the table&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;click &lt;strong&gt;&lt;em&gt;Add&lt;/em&gt;&lt;/strong&gt; to save all modifications&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; It is important the name of the Profile is &amp;ldquo;default&amp;rdquo;. To use a different Profile name, check the chapter &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_cloudforms/4.5/html/assigning_a_custom_analysis_profile_to_a_virtual_machine/index&#34;&gt;Assigning a Custom Analysis Profile to a Virtual Machine&lt;/a&gt; in the CloudForms Documentation for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SELinux Compliance Policy</title>
      <link>http://www.jung-christian.de/post/2017/10/control-policy-selinux/</link>
      <pubDate>Tue, 10 Oct 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/10/control-policy-selinux/</guid>
      <description>

&lt;h1 id=&#34;compliance-policies&#34;&gt;Compliance Policies&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.redhat.com/cloudforms&#34;&gt;CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; allow the definition of Compliance Policies which can be used to verify consistency of Virtual Machines, Instances, Hypervisors and other objects, in the entire environment. Compliance Policies can  trigger actions to be able to notify about non-compliance or to go one step further and enforce compliance, for example by using Ansible Playbooks to fix the problem.&lt;/p&gt;

&lt;p&gt;There are a number of examples about Compliance Policies on the &lt;a href=&#34;http://cloudformsblog.redhat.com/tag/compliance/&#34;&gt;official Red Hat CloudForms blog&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;adjust-the-smart-state-analysis-profile&#34;&gt;Adjust the Smart State Analysis Profile&lt;/h1&gt;

&lt;p&gt;A separate blog post goes into details on how to &lt;a href=&#34;../modify-ssa-profile/&#34;&gt;create and modify a Smart State Analysis Profile&lt;/a&gt;. When creating the profile, it is important its name is &amp;ldquo;default&amp;rdquo; and the policy retrieves the content of the file /etc/sysconfig/selinux.&lt;/p&gt;

&lt;h1 id=&#34;control-policies&#34;&gt;Control Policies&lt;/h1&gt;

&lt;p&gt;Policies in CloudForms and ManageIQ are always a combination of three items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event: the event triggers the evaluation of the condition. An event can be something like &amp;ldquo;VM Power On&amp;rdquo;, &amp;ldquo;Analysis completed&amp;rdquo; and many more. A list of out of the box events can be found by clicking on &lt;strong&gt;&lt;em&gt;Control&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt;, and then clicking on &lt;strong&gt;&lt;em&gt;Events&lt;/em&gt;&lt;/strong&gt; in the accordion on the left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/list-of-events.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/list-of-events-300x96.png&#34; alt=&#34;out of the box events&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The screenshot only shows a subset of all available events.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Condition: the condition is evaluated after the specified event was detected. A condition can verify that a specific Operating System is installed, the VM configuration meets certain criteria and many more&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Action: after detecting the event and validating the condition, an action can be triggered. Actions can be specified differently if the condition was TRUE or FALSE. A Control Policy can can send an email alert, trigger a SNMP trap or any customized action. A number of actions are already shipped out of the box and can be found by clicking on &lt;strong&gt;&lt;em&gt;Control&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt; and then &lt;strong&gt;&lt;em&gt;Actions&lt;/em&gt;&lt;/strong&gt; in the accordion on the left&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/list-of-actions.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/list-of-actions-300x95.png&#34; alt=&#34;list of actions&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The screenshot only shows a subset of all available actions.&lt;/p&gt;

&lt;h1 id=&#34;compliance-policies-1&#34;&gt;Compliance Policies&lt;/h1&gt;

&lt;p&gt;Compliance policies are similar to Control Policies, but do not listen to events. To validate a Compliance Policy, the user can click on &lt;strong&gt;&lt;em&gt;Policy&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Check Compliance of Last Known Configuration&lt;/em&gt;&lt;/strong&gt;, or a Control Policy can trigger an Compliance Policy Check as an Action.&lt;/p&gt;

&lt;p&gt;Compliance Policies can also mark the evaluated object as either Compliant or Non-Compliant. This information can also be used in Reports and Dashboards for a better overview or to be exported for further analysis. More information about Control and Compliance Policies can be found in the &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_cloudforms/4.5/html/policies_and_profiles_guide/&#34;&gt;Policies and Profiles Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;create-a-compliance-policy-for-selinux&#34;&gt;Create a Compliance Policy for SELinux&lt;/h1&gt;

&lt;p&gt;To check if SELinux is in enforcing mode, a compliance policy like this can be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Condition: analyse the content of /etc/sysconfig/selinux and verify &amp;ldquo;SELinux=enforcing&amp;rdquo; is found in the file&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Action: mark the VM as compliant or non-compliant&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of such a policy can be found on &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/control-policies&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;enable-the-policy&#34;&gt;Enable the Policy&lt;/h1&gt;

&lt;p&gt;To enable the Compliance Policy, it has to be part of a Policy Profile. The example found on &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/control-policies&#34;&gt;Github&lt;/a&gt; is pre-configured accordingly.&lt;/p&gt;

&lt;p&gt;As one last step the Policy has to be enabled. This can be done on individual VMs or instances or any where in the hierarchy, up to the provider level. Policies are inherited to their child objects, for example if the Policy is enabled on a specific provider, it automatically applies to all objects found on this provider.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigate to the provider, e.g. &lt;strong&gt;&lt;em&gt;Compute&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Infrastructure&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Providers&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the provider and click on &lt;strong&gt;&lt;em&gt;Policy&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Manage Policies&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/manage-policies.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/manage-policies-300x82.png&#34; alt=&#34;Manage Policies&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check the box next to the Policy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/enable-policy-profile.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/enable-policy-profile-300x274.png&#34; alt=&#34;Enable Policy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;&lt;em&gt;Save&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The icon shows a yellow shield to illustrate the a Policy is enabled&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/provider-policy-enabled.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/provider-policy-enabled-300x77.png&#34; alt=&#34;Provider with enabled Policy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;verify&#34;&gt;Verify&lt;/h1&gt;

&lt;p&gt;To verify the configuration, navigate to a VM or instances on the selected provider. Click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Perform SmartState Analysis&lt;/em&gt;&lt;/strong&gt;. Depending on the performance of the environment, this usually takes up to two minutes. In some environments it can also take much longer (in particular on OpenStack providers).&lt;/p&gt;

&lt;p&gt;Configuration of Smart State is out of scope for this document. There is a knowledge base article &lt;a href=&#34;https://access.redhat.com/articles/435283&#34;&gt;Virtual Machine SmartState Analysis Checklist&lt;/a&gt; with some useful links.&lt;/p&gt;

&lt;p&gt;System is not compliant:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/system-non-compliant.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/system-non-compliant-300x58.png&#34; alt=&#34;System is not compliant&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;System is compliant:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/system-compliant.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/system-compliant-300x61.png&#34; alt=&#34;System is not compliant&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SELinux Compliance Policy</title>
      <link>http://www.jung-christian.de/post/2017/11/continues-integration-with-automate/</link>
      <pubDate>Tue, 10 Oct 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/11/continues-integration-with-automate/</guid>
      <description>

&lt;h1 id=&#34;continuous-integration-with-cloudforms-or-manageiq-automate&#34;&gt;Continuous Integration with CloudForms or ManageIQ Automate&lt;/h1&gt;

&lt;p&gt;CloudForms and ManageIQ have an embedded editor which allows you to write and edit Automate code. This is convenient and easy to use for smaller modifications. As soon as you want to work on larger projects, you probably want more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;history: be able to go back to previous versions of your code&lt;/li&gt;
&lt;li&gt;branches: be able to create branches for test features or specific bug fixes&lt;/li&gt;
&lt;li&gt;better editor: the built in HTML editor is good enough for simple coding, but eventually you might want to use a more sophisticated editor. Popular editors amongst CloudForms users are Sublime, Atom, Visual Studio Code, or maybe just your optimized configuration of VI or Emacs.&lt;/li&gt;
&lt;li&gt;logs: as soon as you collaborate working on Automate code, you want to be able to see how did which change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Automate code can not only be written in the built in HTML editor, it can also be imported from a Git repository. For continuous integration, the REST API can be used to trigger a refresh every time new code is committed.&lt;/p&gt;

&lt;h1 id=&#34;the-setup&#34;&gt;The setup&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;http://gitlab.com&#34;&gt;GitLab&lt;/a&gt; are probably the most popular tools for Open Source Source Code Management tools currently used. The example below will work with either one of them, and should also work with any Git/CI combination, but might require some additional steps.&lt;/p&gt;

&lt;p&gt;For the example below, GitLab is used, since it has builtin CI/CD features. If you prefer GitHub, the following instructions should work as well, but you might need an additional tool, for example &lt;a href=&#34;http://www.travis-ci.org&#34;&gt;Travis CI&lt;/a&gt;, for the CI part.&lt;/p&gt;

&lt;p&gt;Every time new code is committed to the Git repository, a CI/CD Tool will detect that change and use an CloudForms API call to trigger a refresh. As a consequence, the script which is running on the CI/CD server must be able to open a TCP connection on port 443 to the CloudForms appliance by using its IP address or DNS name.&lt;/p&gt;

&lt;h1 id=&#34;adding-a-git-repository&#34;&gt;Adding a Git repository&lt;/h1&gt;

&lt;p&gt;Create your Git repository with your Automate code. It is easier if you start with an existing repository, which actually already has some code checked in.&lt;/p&gt;

&lt;p&gt;Before you can add a Git repository, the necessary role has to be enabled. Click on the top right menu which shows your user name and then &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;. Make sure you enable the &amp;ldquo;Git Repositories Owner&amp;rdquo; role (you might have to scroll down to see all the roles, depending on your screen resolution).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;enable-git-repo-role.png&#34;&gt;&lt;img src=&#34;images/enable-git-repo-role-300x138.png&#34; alt=&#34;Enable Git Repositories Role&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can take a few moments for the services to start in the background.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Import/Export&lt;/em&gt;&lt;/strong&gt;. If the submit button is still greyed out, the role has not been activated yet. The question mark icon next to the submit button will give you an according hint. in this case wait another minute and reload the page.&lt;/p&gt;

&lt;p&gt;From your Git repository, copy the HTML URL (SSH will not work). Paste the URL into the &amp;ldquo;Git URL&amp;rdquo; field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; A Git URL is pointing to a file with the suffix .git. For example, the Git URL for the repository used for this example is &lt;a href=&#34;https://gitlab.com/cjung/automate.git&#34;&gt;https://gitlab.com/cjung/automate.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Username and Password are optional, as indicated in the UI. If you have a public repository on GitLab or GitHub, you will not need it. For private repositories, the user credentials have to be provided. CloudForms or ManageIQ will only need privileges to pull code, so a read only account is enough.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/git-repo-credentials.png&#34;&gt;&lt;img src=&#34;images/git-repo-credentials-300x285.png&#34; alt=&#34;Provide details for Git repository&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on &lt;strong&gt;&lt;em&gt;Submit&lt;/em&gt;&lt;/strong&gt; it can take a few seconds before you see the next screen. During this delay, CloudForms/ManageIQ will try to access the repository and check if it can find an valid Automate repository.&lt;/p&gt;

&lt;p&gt;If successful, the next screen will allow you to chose which tag or branch you want to checkout. For this example, we use the master branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/select-branch-or-tag-300x160.png&#34;&gt;1&lt;a href=&#34;images/select-branch-or-tag.png&#34;&gt;Select Branch or Tag&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The import can once more take a few seconds, after which you should get a message, the import was successful.&lt;/p&gt;

&lt;h2 id=&#34;verify-the-new-automate-domain&#34;&gt;Verify the new Automate domain&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt; to see the domain after the import. Note that the domain is always read only. Code has to be changed in Git and can not be changed in the builtin editor anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/git-domain-300x65.png&#34;&gt;&lt;img src=&#34;images/git-domain.png&#34; alt=&#34;Automate Domain coming from Git&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on the Domain, a refresh can be initiated from the &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; menu and &lt;strong&gt;&lt;em&gt;Refresh with new branch or tag&lt;/em&gt;&lt;/strong&gt;. This can also be used to change the branch or tag used to retrieve the code from Git.&lt;/p&gt;

&lt;h1 id=&#34;create-a-locked-down-role&#34;&gt;Create a locked down role&lt;/h1&gt;

&lt;p&gt;So far we have manually imported Automate code from an existing Git repository. For a continuous integration workflow, we need an automatism to update the code in CloudForms, every time we commit a change to Git.&lt;/p&gt;

&lt;p&gt;To be able to accomplish this, we need a user with the necessary privileges to refresh the Automate domain. This user has to log into CloudForms and perform a refresh by sending an API call.&lt;/p&gt;

&lt;p&gt;For security reasons, it is advised to create an account with restricted privileges. Fortunately CloudForms allows us to create a user which can only perform a refresh, but no other action.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; by clicking on your username on the top right corner and click on &lt;strong&gt;&lt;em&gt;Access control&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;strong&gt;&lt;em&gt;Roles&lt;/em&gt;&lt;/strong&gt; and open the &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; menu and &lt;strong&gt;&lt;em&gt;Add a new Role&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Give the new role a name, for example &amp;ldquo;Git&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disable all privileges by making sure the box next to &amp;ldquo;Everything&amp;rdquo; is disabled&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drill into &lt;strong&gt;&lt;em&gt;Automation&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Explorer&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Automate Domains&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Modify&lt;/em&gt;&lt;/strong&gt; and enable &lt;strong&gt;&lt;em&gt;Refresh&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/only-enable-automate-refresh-300x341.png&#34;&gt;&lt;img src=&#34;images/only-enable-automate-refresh.png&#34; alt=&#34;Only enable Automate Refresh privilege&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the new role&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to &lt;strong&gt;&lt;em&gt;Groups&lt;/em&gt;&lt;/strong&gt;, click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Add a new Group&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter a description, for example &amp;ldquo;Git&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the previously created role in the &amp;ldquo;Role&amp;rdquo; drop down list&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the parent tenant&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/add-git-group-300x159.png&#34;&gt;&lt;img src=&#34;images/add-git-group.png&#34; alt=&#34;Add the new group&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the new group&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Last but not least, navigate to &lt;strong&gt;&lt;em&gt;Users&lt;/em&gt;&lt;/strong&gt; and click on &lt;strong&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Add a new User&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in the fields for &amp;ldquo;Full Name&amp;rdquo; and &amp;ldquo;Username&amp;rdquo;, also set a password for the new user. Make sure to remember the username and password, since you will need both later. The email address is optional.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure to select the previously created group in the &amp;ldquo;Group&amp;rdquo; drop down list&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;images/add-git-user-300x259.png&#34;&gt;&lt;img src=&#34;images/add-git-user.png&#34; alt=&#34;Add the new user&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the new User.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;build-a-ci-pipeline&#34;&gt;Build a CI pipeline&lt;/h1&gt;

&lt;p&gt;The final piece in the puzzle is the script which is executed on the CI/CD server which triggers CloudForms to refresh the Automate domain.&lt;/p&gt;

&lt;h2 id=&#34;gitlab&#34;&gt;GitLab&lt;/h2&gt;

&lt;p&gt;This example is using GitLab:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create a new file called &amp;ldquo;.gitlab-ci.yml&amp;rdquo; in the root directory of the git repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;job1:
  script:
    - curl -k -X POST -d&#39;{&amp;quot;action&amp;quot;:&amp;quot;refresh_from_source&amp;quot;}&#39; https://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;FQDN or IP of CloudForms Appliance&amp;gt;/api/automate_domains/&amp;lt;name of Automate domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;travis-ci&#34;&gt;Travis CI&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create a new file called &amp;ldquo;.travis.yml&amp;rdquo; in the root directory of the git repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;language: ruby

script:
- curl -k -X POST -d&#39;{&amp;quot;action&amp;quot;:&amp;quot;refresh_from_source&amp;quot;}&#39; https://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;FQDN or IP of CloudForms Appliance&amp;gt;/api/automate_domains/&amp;lt;name of Automate domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;save the file and commit it to the repository&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;

&lt;p&gt;After committing the build script, you can start doing changes to your Automate repository. Every time you commit a change, the build script should be executed and refresh the Automate domain.&lt;/p&gt;

&lt;p&gt;Note that it can take a few seconds unless the CI/CD server detects the change and they show up in CloudForms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SmartProxy Affinity</title>
      <link>http://www.jung-christian.de/post/2017/02/smart-proxy-affinity/</link>
      <pubDate>Thu, 23 Feb 2017 12:19:49 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/02/smart-proxy-affinity/</guid>
      <description>

&lt;h1 id=&#34;smartstate-analysis&#34;&gt;SmartState Analysis&lt;/h1&gt;

&lt;p&gt;CloudForms and ManageIQ can collect information from the configured providers to build its internal inventory. For virtual machines or instances this includes information like the name, associated IP addresses, virtual hardware specification and many more. Additional information can be retrieved by executing a &lt;em&gt;SmartState Analysis&lt;/em&gt;. SmartState is implemented agentless and uses temporary snapshots to analyze virtual machines and templates.&lt;/p&gt;

&lt;p&gt;To collect the information from VMware, the VDDK library has to be installed on all applicable appliances manually. For CloudForms there is a &lt;a href=&#34;https://access.redhat.com/articles/2078103&#34;&gt;knowledge base article&lt;/a&gt; which describes the setup process in detail.&lt;/p&gt;

&lt;h1 id=&#34;zones-and-regions&#34;&gt;Zones and Regions&lt;/h1&gt;

&lt;p&gt;When designing large deployments, multiple appliances are usually deployed. Zones and regions make it possible to implement security isolation and to distribute actions between multiple appliances. SmartState Analysis is comprised of two roles which can be enabled or disabled on each individual appliance. Details about roles can be found in the &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_cloudforms/4.2/html/general_configuration/configuration#servers&#34;&gt;General Configuration&lt;/a&gt; Guide.&lt;/p&gt;

&lt;h1 id=&#34;role-assignment&#34;&gt;Role assignment&lt;/h1&gt;

&lt;p&gt;When a user requests a SmartState Analysis to be performed, ManageIQ or CloudForms tries to assign the job to an appropriate appliance. It&amp;rsquo;s using the information about the regions and zones and tries to find an appliance which is in the same zone as the provider on which the virtual machine or instance is located.&lt;/p&gt;

&lt;p&gt;Any appliance which is in the same zone as the parent provider, is eligable to execute the job.&lt;/p&gt;

&lt;h1 id=&#34;smart-proxy-affinity&#34;&gt;Smart Proxy Affinity&lt;/h1&gt;

&lt;p&gt;In some cases the above logic is not ideal. The following is a list of different scenarios, where the automatic assignment is not ideal or not possible. This is not a complete list, just some examples.&lt;/p&gt;

&lt;h2 id=&#34;no-appliance-is-in-the-appropriate-zone&#34;&gt;No appliance is in the appropriate zone&lt;/h2&gt;

&lt;p&gt;To make the described logic work, at least one appliance has to be in the same zone as the provider on which the VM or instance is located. For small providers (for example test environments) it might not be necessary to have dedicated appliances, so this provider has to be managed by appliances which are in the same zone, but not running on the same provider.&lt;/p&gt;

&lt;h2 id=&#34;openstack-best-practice&#34;&gt;OpenStack best practice&lt;/h2&gt;

&lt;p&gt;For OpenStack OverCloud and UnderCloud providers, it is often considered best practice to run the management infrastructure outside of the OpenStack environment. In such a setup the appliance would run on a different virtual infrastructure, but with the necessary connectivity in place to reach the API endpoints.&lt;/p&gt;

&lt;h2 id=&#34;performance-and-sociability&#34;&gt;Performance and Sociability&lt;/h2&gt;

&lt;p&gt;For very large providers or if a lot of SmartState Analysis jobs are executed, it might be necessary to assign specific appliances to a subset of the infrastructure.&lt;/p&gt;

&lt;h1 id=&#34;affinity-assignment&#34;&gt;Affinity assignment&lt;/h1&gt;

&lt;p&gt;For those few special cases where the normal automatic logic based on zones and regions doesn&amp;rsquo;t work, SmartProxy Affinity can be used to manually assign appliances to specific parts of the infrastructure.&lt;/p&gt;

&lt;p&gt;The configuration can be found by navigating to the configuration menu (click on the user name on the top right menu), on the tree in the left pane, select the zone and then the tab &amp;ldquo;SmartProxy Affinity&amp;rdquo;. It is possible to drill down and enable or disable the affinity for fine grained control.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/ssa-affinity.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/ssa-affinity-300x125.png&#34; alt=&#34;SmartProxy Affinity&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;gotcha&#34;&gt;Gotcha&lt;/h1&gt;

&lt;p&gt;If SmartProxy Affinity assignments are used, changes of the infrastructure will require the settings to be updated. For example if a new datastore or hypervisor is added, none of the appliances will be assigned until the configuration is updated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ManageIQ vs CloudForms - what&#39;s the difference</title>
      <link>http://www.jung-christian.de/post/2017/01/manageiq-vs-cloudforms/</link>
      <pubDate>Sun, 29 Jan 2017 22:14:29 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/01/manageiq-vs-cloudforms/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://redhat.com/cloudforms&#34;&gt;Red Hat CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; both recently launched new releases of their software. The latest release of &lt;a href=&#34;https://access.redhat.com/documentation/en/red-hat-cloudforms/4.2/paged/release-notes/&#34;&gt;Red Hat CloudForms is 4.2&lt;/a&gt;, while ManageIQ is following an alphabetical versioning schema and &lt;a href=&#34;http://manageiq.org/blog/2016/12/manageiq-euwe-ga-announcement/&#34;&gt;released Euwe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Red Hat is following an &amp;ldquo;upstream first&amp;rdquo; policy, meaning all new features are developed in the community driven project, in this case ManageIQ. Based on the work of the upstream project, every now and then a supported Red Hat Product is created, in this case Red Hat CloudForms. The most prominent example for this approach is &lt;a href=&#34;https://getfedora.org/&#34;&gt;Fedora&lt;/a&gt; which is the upstream community project for &lt;a href=&#34;https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux&#34;&gt;Red Hat Enterprise Linux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So what&amp;rsquo;s the difference between the upstream community project and the downstream supported product?&lt;/p&gt;

&lt;h1 id=&#34;support&#34;&gt;Support&lt;/h1&gt;

&lt;p&gt;For ManageIQ, there are a number of great ways to get support direclty from the &lt;a href=&#34;http://manageiq.org/community/&#34;&gt;upstream community&lt;/a&gt;. Gitter can be used for chat, there is a forum, links to social media and opportunities to meet face to face at several conferences.&lt;/p&gt;

&lt;p&gt;As a Red Hat customer, you can open &lt;a href=&#34;http://access.redhat.com&#34;&gt;support cases&lt;/a&gt;, search the knowledge base, &lt;a href=&#34;http://www.redhat.com/training/&#34;&gt;train your staff at presence or virtual trainings&lt;/a&gt;, &lt;a href=&#34;http://www.redhat.com/consulting/&#34;&gt;hire consultants&lt;/a&gt; to design and implement your CloudForms environment. There is also a documented &lt;a href=&#34;https://access.redhat.com/support/policy/updates/cloudforms/&#34;&gt;Life Cycle&lt;/a&gt; which allows for better deployment planning.&lt;/p&gt;

&lt;p&gt;Red Hat also performs additional quality assurance before releasing the CloudForms release. Certain features which are not deemed enterprise ready, might be in ManageIQ, but not in CloudForms.&lt;/p&gt;

&lt;p&gt;For Red Hat CloudForms the &lt;a href=&#34;https://access.redhat.com/documentation/en/red-hat-cloudforms/4.2/paged/support-matrix/&#34;&gt;Support Matrix&lt;/a&gt; describes in detail which feature is supported and which isn&amp;rsquo;t. For example, in ManageIQ Euwe includes the capability to manage &lt;a href=&#34;https://github.com/ManageIQ/manageiq/blob/euwe/CHANGELOG.md&#34;&gt;VMware vCloud&lt;/a&gt;, which is currently not listed as being supported in CloudForms.&lt;/p&gt;

&lt;h1 id=&#34;branding&#34;&gt;Branding&lt;/h1&gt;

&lt;p&gt;The branding of the UI, naming of the images and packages, and the documentation are different too. Until recently, Red Hat CloudForms was using &lt;a href=&#34;http://www.adobe.com/&#34;&gt;Adobe Flash&lt;/a&gt; to render certain diagrams and graphs, while ManageIQ was using a JavaScript library to do the same. Starting with version 4.2 of CloudForms, it is using the same library and &lt;a href=&#34;http://www.jung-christian.de/post/2017/01/bye-bye-flash/&#34;&gt;got rid of Flash&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;upgrades&#34;&gt;Upgrades&lt;/h1&gt;

&lt;p&gt;Red Hat CloudForms is a virtual appliances based on Red Hat Enterprise Linux. All software installed in the appliance is packaged in the RPM format. Customers can subscribe to Red Hat Network, Satellite or Update Infrastructure to deploy updates to the appliances.&lt;/p&gt;

&lt;p&gt;ManageIQ virtual appliances are based on &lt;a href=&#34;http://www.centos.org&#34;&gt;CentOS&lt;/a&gt; and the additional software is basically just a git clone. To do an upgrade of the underlying OS, you can just do a &amp;ldquo;yum update&amp;rdquo; as usual, but this will not update the ManageIQ application.&lt;/p&gt;

&lt;p&gt;Each Red Hat CloudForms release also comes with an &lt;a href=&#34;https://access.redhat.com/documentation/en/red-hat-cloudforms/4.2/paged/migrating-to-red-hat-cloudforms-42/&#34;&gt;step-by-step guide&lt;/a&gt; on how to perform upgrades. The &lt;a href=&#34;https://access.redhat.com/support/policy/updates/cloudforms/&#34;&gt;Life Cycle document&lt;/a&gt; helps to understand which upgrades are and will be supported.&lt;/p&gt;

&lt;p&gt;ManageIQ does not have an official Life Cycle document. Upgrades also require &lt;a href=&#34;http://talk.manageiq.org/t/upgrading-from-darga-n-to-darga-n-1/1574/3&#34;&gt;more manual steps&lt;/a&gt; and a better understanding of Ruby, Rails, Linux and how to fix stuff is necessary.&lt;/p&gt;

&lt;h1 id=&#34;automate&#34;&gt;Automate&lt;/h1&gt;

&lt;p&gt;Users and customers can extend the out of the box functionality by adding their own code in what is called &amp;ldquo;Automate&amp;rdquo;. Although both versions ship with the &amp;ldquo;ManageIQ&amp;rdquo; domain, only Red Hat CloudForms comes with an additional &amp;ldquo;Red Hat&amp;rdquo; domain. This domain includes some additional integration examples and optimizations.&lt;/p&gt;

&lt;h1 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h1&gt;

&lt;p&gt;This might not be a complete list of all differences between ManageIQ and CloudForms. It&amp;rsquo;s also - intentionally - not discussiong business value of the subscription and focuses exclusively on the technical characteristics.&lt;/p&gt;

&lt;p&gt;There is also an article about the same topic on the &lt;a href=&#34;http://talk.manageiq.org/t/differences-between-red-hat-cloudforms-and-manageiq/728/4&#34;&gt;ManageIQ Forum&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Call a script from a Control Policy</title>
      <link>http://www.jung-christian.de/post/2017/01/call-script-from-control-policy/</link>
      <pubDate>Tue, 17 Jan 2017 22:14:29 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/01/call-script-from-control-policy/</guid>
      <description>

&lt;h1 id=&#34;control-and-compliance-policies&#34;&gt;Control and Compliance Policies&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://redhat.com/cloudforms&#34;&gt;Red Hat CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; allow users to create control and compliance policies to enforce compliance checks on the Cloud, IaaS and PaaS environment. There is &lt;a href=&#34;http://manageiq.org/docs/reference/latest/doc-Policies_and_Profiles_Guide/miq/&#34;&gt;Documentation&lt;/a&gt; available on how to create and manage Policies, so this post will skip going into further details on that.&lt;/p&gt;

&lt;p&gt;With such a policy very powerful rules can be created and enabled. Sometimes a very simple example is all you need though. I&amp;rsquo;ve been asked several times how we could call a simple shell script or execute any command triggered by a control or compliance policy and this post should help to shed some light on it.&lt;/p&gt;

&lt;h1 id=&#34;automate-method-to-run-a-system-command&#34;&gt;Automate Method to run a system command&lt;/h1&gt;

&lt;p&gt;First we need a method which we can call from a Control Policy. You can import my &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/Automate&#34;&gt;Automate Datastore from Github&lt;/a&gt;. You can find a method which calls a System Command in cjung-git/Control/Methods/run_script.&lt;/p&gt;

&lt;p&gt;The interesting part is just this one line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;system(&amp;quot;/bin/rpm -q cfme &amp;amp;&amp;gt; /tmp/cfme-release.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This examples queries the system for the installed version of the CFME package and writes the result into a file in /tmp called cfme-release.txt. You could replace the system command with anything you want. Keep in mind though, that you can not user interactive commands which are asking for user input.&lt;/p&gt;

&lt;h1 id=&#34;creating-a-control-policy&#34;&gt;Creating a Control Policy&lt;/h1&gt;

&lt;p&gt;CloudForms has two types of Policies. Control Policies consist of an &lt;strong&gt;Event&lt;/strong&gt; which triggers the policy, a &lt;strong&gt;Condition&lt;/strong&gt; which has to be met and an &lt;strong&gt;Action&lt;/strong&gt; which will be performed.&lt;/p&gt;

&lt;p&gt;Compliance Policies are slightly different. They are not trigered by an event and the result (compliant or not compliant) will be shown in the details of the affected object, for example a virtual machine. Control Policies can trigger a compliance check and the results of a compliance check can trigger a control policy.&lt;/p&gt;

&lt;p&gt;For this example, we create a simple Compliance Policy.&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-action&#34;&gt;Create a new Action&lt;/h2&gt;

&lt;p&gt;To be able to call our system command, we need to create a new action. Navigate to Control, Explorer, Actions and click Configuration, Add a new action. We want o run our own piece of code which is executed from Automate, so we have to select &amp;ldquo;Invoke a Custom Automation&amp;rdquo;. As usual, give your action a reasonable name.&lt;/p&gt;

&lt;p&gt;In the Custom Automation fields which just appeared, we need to tell the system which action to perform. The Automate Datastore which you just imported has an Request defined which is called &amp;ldquo;run_script&amp;rdquo;. This has to go into the Request field. The message is in most cases &amp;ldquo;create&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If you want to lean more about Automate, check out the book &lt;a href=&#34;https://access.redhat.com/mastering-cloudforms-automation&#34;&gt;&amp;ldquo;Master CloudForms Automation&amp;rdquo;&lt;/a&gt; - which also applies to ManageIQ.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/add-new-action.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/add-new-action-300x195.png&#34; alt=&#34;Add new Action&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;create-new-policy&#34;&gt;Create new Policy&lt;/h2&gt;

&lt;p&gt;Navigate to Control, Explorer, Policies and select &amp;ldquo;VM Compliant Policies&amp;rdquo;. In the Configuration Menu click select add a new policy. Choose a reasonable name.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/control-policy-system-command.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/control-policy-system-command-300x145.png&#34; alt=&#34;Add Compliance Policy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bye Bye Flash</title>
      <link>http://www.jung-christian.de/post/2017/01/bye-bye-flash/</link>
      <pubDate>Thu, 12 Jan 2017 18:10:50 +0100</pubDate>
      
      <guid>http://www.jung-christian.de/post/2017/01/bye-bye-flash/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.adobe.com/de/products/flash.html&#34;&gt;Adobe&amp;rsquo;s Flash Plugin&lt;/a&gt; is well known for its security flaws and for causing browser crashes. ManageIQ got rid of Flash already in the Anand Release and replaced all relevant parts of the code with a JavaScript library to render graphs and diagrams. Finally &lt;a href=&#34;http://cloudformsblog.redhat.com/2017/01/04/announcing-cloudforms-4-2/&#34;&gt;Red Hat CloudForms 4.2&lt;/a&gt; was released and is now using the same JavaScript library and does not require Flash anymore.&lt;/p&gt;

&lt;p&gt;So the first thing I did is running the following command on all my machines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rpm -e flash-plugin
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to setup a PostgreSQL database for ManageIQ and CloudForms</title>
      <link>http://www.jung-christian.de/post/2016/11/setup-postgresql-database-manageiq-cloudforms/</link>
      <pubDate>Wed, 23 Nov 2016 14:44:44 +0000</pubDate>
      
      <guid>http://www.jung-christian.de/post/2016/11/setup-postgresql-database-manageiq-cloudforms/</guid>
      <description>

&lt;p&gt;When playing with several &lt;a href=&#34;http://www.redhat.com/en/technologies/management/cloudforms&#34;&gt;CloudForms&lt;/a&gt; and &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ&lt;/a&gt; appliances in my lab environment, I face the problem that I quickly run out of RAM on my virtual infrastructure. I&amp;rsquo;m using a number of &lt;a href=&#34;http://www.intel.com/content/www/us/en/nuc/overview.html&#34;&gt;Intel NUC&amp;rsquo;s&lt;/a&gt; and although the newest models can go up to 32 GB of RAM, memory has always been my bottleneck. So I thought instead of running a PostgreSQL server in each virtual CloudForms or ManageIQ appliance, it might be more efficient to have a dedicated PostgreSQL Server for all of them. There are other use cases where one might want to use a external database:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;High Availability: built a PostgreSQL cluster to increase fault tolerance&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scalability: a dedicated database server can make it easier to scale up&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Maintenance: if the database is clustered upgrades and other maintenance tasks can be performed on one node, while all other nodes continue to work&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just some examples and there are many more use cases and examples.&lt;/p&gt;

&lt;h1 id=&#34;prepare-the-postgresql-server&#34;&gt;Prepare the PostgreSQL Server&lt;/h1&gt;

&lt;p&gt;Obviously the first step is to setup the PostgreSQL Server on a physical or virtual machine (or multiple, if one wants to setup a clustered databse). This post will not go into any details on how to do that. It&amp;rsquo;s covered in many other posts and documents. When tuning the database server, it is recommended to have a look at the example configuration which can be found on an CloudForms or ManageIQ virtual appliance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# example configuration on CloudForms Appliances
/opt/rh/cfme-appliance/TEMPLATE/var/opt/rh/rh-postgresql94/lib/pgsql/data/
# example configuration on ManageIQ Appliances
/opt/manageiq/manageiq-appliance/TEMPLATE/var/opt/rh/rh-postgresql95/lib/pgsql/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure the applicable settings are transferred to your PostgreSQL Server to get best possible performance. Since the external database will be used a lot, its performance is crucial for the entire environment.&lt;/p&gt;

&lt;p&gt;Tools like &lt;a href=&#34;https://www.postgresql.org/docs/current/static/pgbench.html&#34;&gt;pg_bench&lt;/a&gt; can help to verify database performance.&lt;/p&gt;

&lt;h1 id=&#34;create-the-user-database-and-privileges&#34;&gt;Create the user, database and privileges&lt;/h1&gt;

&lt;p&gt;After the database server has been installed, tuned and tested, it&amp;rsquo;s time to create the user and database. I&amp;rsquo;m using one database server for many CloudForms and ManageIQ appliances. To be able to isolate database access, I create a user for every appliance and restrict this user to its dedicated database.&lt;/p&gt;

&lt;p&gt;For the following example, let&amp;rsquo;s assume there is a new &lt;a href=&#34;http://www.manageiq.org&#34;&gt;ManageIQ Appliance&lt;/a&gt; running the &lt;a href=&#34;http://manageiq.org/blog/2016/06/announce_e_name/&#34;&gt;Euwe&lt;/a&gt; release.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# create a new user and grant super user privilegescreateuser -s -P miq-euwe# create a dedicate database and set ownercreatedb -O miq-euwe miq-euwe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just created a user call &lt;strong&gt;miq-euwe&lt;/strong&gt; and gave him ownership to the new database with the same name. Why this user was created as a super user, will be covered in the next paragraph. Before we move on, we need to grant this user remote login privileges. Modfy pg_hba.conf on the PostgreSQL server and add a line similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host all miq-euwe 192.168.1.1/32 md5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will allow the user &lt;strong&gt;miq-euwe&lt;/strong&gt; to login into all databases from the system with the IP &lt;strong&gt;192.168.1.1&lt;/strong&gt; after authenticating with the correct password. Test the connection from the appliance with the &lt;strong&gt;psql&lt;/strong&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;psql -h &amp;lt;hostname&amp;gt; -U miq-euwe -W miq-euwe
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configure-database-with-appliance-console&#34;&gt;Configure database with appliance console&lt;/h1&gt;

&lt;p&gt;To configure the appliance to use the external database, the appliance_console can be used (on current version, you can just use the alias &amp;ldquo;ap&amp;rdquo;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ appliance_console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chose Option 8 &amp;ldquo;Configure Database&amp;rdquo; and go through the guided procedure.&lt;/p&gt;

&lt;h2 id=&#34;what-happens&#34;&gt;What happens&lt;/h2&gt;

&lt;p&gt;The appliance performs a number of steps while configuring the database:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;connect to the database and try to login&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;verify no process is currently using the database&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if no other process is using the database, delete it&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create a new database with the specified name and credentials&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;populate the database with the initial tables and data&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On the first start of the evmserverd service, additional data is written into the database. During that phase the database can grow to around 30 to 40 MB.&lt;/p&gt;

&lt;p&gt;Now it might be clearer, why we needed a user with superuser privilege and why the pg_hba.conf has to allow access to all databases. But not all is lost, this can be fixed after the initial setup is done.&lt;/p&gt;

&lt;h1 id=&#34;fix-database-configuration&#34;&gt;Fix database configuration&lt;/h1&gt;

&lt;p&gt;After setting up the appliance and populating the initial data, I restrict database access to what is absolutely necessary. This is done by performing two simple steps.&lt;/p&gt;

&lt;p&gt;Fix pg_hba.conf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# only grant access to miq-euwe database
host miq-euwe miq-euwe 192.168.1.1/32 md5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make this change active, send a Hangup signal to the master PostgreSQL process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kill -HUP &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove superuser privilege from user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pgsql=# alter role miq-euwe nosuperuser;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify the appliance still works correctly after applying those changes.&lt;/p&gt;

&lt;h1 id=&#34;clean-up-the-appliance&#34;&gt;Clean up the appliance&lt;/h1&gt;

&lt;p&gt;When logging into the appliance, the active database configuration can be found in the Configuration, Database menu.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/external-database.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/external-database-300x69.png&#34; alt=&#34;Verify external database configuration&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything works fine, the internal database role can be disabled, which will also free up some memory in the virtual machine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/disable-db-role.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/disable-db-role-300x157.png&#34; alt=&#34;How to disable database role&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m using this setup since CloudForms 5.6, aka ManageIQ Darga on a daily basis. I also tested this with previous versions of CloudForms back to 5.3 and the basic steps have always been the same.&lt;/p&gt;

&lt;p&gt;To make ManageIQ and CloudForms work without superuser privileges during setup, a &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1364270&#34;&gt;Bugzilla Ticket&lt;/a&gt; has been created.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Tags for access control</title>
      <link>http://www.jung-christian.de/post/2016/08/using-tags-for-access-control/</link>
      <pubDate>Thu, 25 Aug 2016 18:35:15 +0000</pubDate>
      
      <guid>http://www.jung-christian.de/post/2016/08/using-tags-for-access-control/</guid>
      <description>

&lt;p&gt;UPDATE 2016-10-14: A more polished version of this article can now be found on the &lt;a href=&#34;http://cloudformsblog.redhat.com/2016/10/13/using-tags-for-access-control/&#34;&gt;Official Red Hat CloudForms Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most systems are using Access Control LIsts (ACL) to manage user access to objects. Common examples are ACL&amp;rsquo;s for file systems, LDAP, Web Servers and many more. Who ever had to create ACL rules and maintain them knows how complicated this can be. To make access control easy again, CloudForms and ManageIQ are using tags. If the group a user belongs to has the same tag associated as the accessed object, access is granted, if not, access is denied.&lt;/p&gt;

&lt;p&gt;Sounds simple and straight forward. There are a couple of things to know about tags, which make it very powerful, but using them also a bit tricky. Let&amp;rsquo;s start with some basics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;User: users can be created in the internal database or are retrieved from external authentication (LDAP, Active Directory, IPA/RH Identitiy Manager which is part of Red Hat Enterprise Linux). Meta data including the full name, the email address, the password (in case of database authentication) and a relationship to one or more groups&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Groups: every user is a member of one or more groups (if the internal database is used for authentication, users can only be a member of one group)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Roles: every group is associated to exactly one role which describes the granted privileges&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tenants: multiple tenants can be used to separate slices of the infrastructure. Tenants could be external customers, internal departments or project teams.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Groups are used to define the scope or visibility of a user. For example, a member of the Engineering Department can be granted access to all VMs owned by the Engineering Department. Or an operator could be a member of the group Operations and be granted access to all VMs running in the production environment.&lt;/p&gt;

&lt;p&gt;Roles are used to define which actions a user is allowed to perform. For example, an operator role could define all actions needed for an operator. This could include permissions to start or stop virtual machines, reconfigure them etc. A role &amp;ldquo;self service user&amp;rdquo; could allow a user to order new VMs and manage them.&lt;/p&gt;

&lt;p&gt;The combination of groups and role defines which actions are allowed for which object. An operator in the Engineering Department would have the same privileges as an operator in the Finance Department (because they share the same role), but they would still see different objects (because they are not in the same group).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s discuss a couple of examples to get familiar with the model.&lt;/p&gt;

&lt;h1 id=&#34;setting-the-stage&#34;&gt;Setting the stage&lt;/h1&gt;

&lt;p&gt;For the following exercises the internal database authentication has been used. That limits the examples to the restriction of one user is always in exactly one group. If a more flexible model is needed, where a user can be a member of multiple groups, an external authentication source like LDAP, Active Directory or FreeIPA (Red Hat Identity Manager) has to be used. But let&amp;rsquo;s keep it simple.&lt;/p&gt;

&lt;p&gt;The way the user interface is designed, it makes sense to start with the role, then create the group and finally the user. Let&amp;rsquo;s keep tenants for later.&lt;/p&gt;

&lt;h2 id=&#34;example-role-self-service&#34;&gt;Example Role &amp;ldquo;Self Service&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Navigate to &amp;ldquo;Settings&amp;rdquo;, &amp;ldquo;Configuration&amp;rdquo; and click on &amp;ldquo;Access Control&amp;rdquo; in the pane on the left. and then click on &amp;ldquo;Roles&amp;rdquo;. Add a new role by clicking on &amp;ldquo;Configuration&amp;rdquo;, &amp;ldquo;Add a new Role&amp;rdquo; name it &amp;ldquo;Self Service&amp;rdquo;. Granting privileges to the role is very nicely implemented. The tree on the right represents all the menus and actions a user can perform in the UI. Enabling (checking) a feature grants the privilege to the role. By drilling down into sub folders, very fine grained permissions can be granted (e.g. power on, but not power off).&lt;/p&gt;

&lt;p&gt;For the purpose of this demo, a role with full access to &amp;ldquo;Cloud Intel&amp;rdquo;, &amp;ldquo;Services&amp;rdquo;, &amp;ldquo;Compute&amp;rdquo;, &amp;ldquo;Settings&amp;rdquo; and &amp;ldquo;Access Rules for all Virtual Machines&amp;rdquo; - but no other privileges - is created.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/add-role.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/add-role-300x122.png&#34; alt=&#34;add role&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-group-engineering&#34;&gt;Example Group &amp;ldquo;Engineering&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;In the next step a group called &amp;ldquo;Engineering&amp;rdquo; is created. All members of this group will have the role &amp;ldquo;Self Service&amp;rdquo; assigned, which was created in the previous step. For now, we skip tags and filters and keep them all unchecked.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/create-group.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/create-group-300x203.png&#34; alt=&#34;create group&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-user-joe-doe&#34;&gt;Example user Joe Doe&lt;/h2&gt;

&lt;p&gt;In the last step a user &amp;ldquo;Joe Doe&amp;rdquo; is created. This will be a local user (stored in the database) and is a member of the Engineering group.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/add-user.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/add-user-300x184.png&#34; alt=&#34;add user&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;

&lt;p&gt;If Joe Doe logs into the web interface and navigates to Providers, Hosts, Virtual Machines or Service Catalogs he will see all existing objects. When the user was created, he was assigned to a group which doesn&amp;rsquo;t have any restrictions on visibility, so this should not be a surprise.&lt;/p&gt;

&lt;h1 id=&#34;granting-access-to-individual-objects&#34;&gt;Granting access to individual objects&lt;/h1&gt;

&lt;p&gt;Joe Doe can now see all objects in the Web UI. Since Joe Doe is a member of the Engineering Department, we want to restrict his visibility to VMs associated to Engineering. To accomplish this, CloudForms/ManageIQ needs to know which VMs are part of the Engineering Department. This can be done by tagging those objects. But first, let&amp;rsquo;s restrict Joe Doe to only see objects tagged as Department/Engineering.&lt;/p&gt;

&lt;p&gt;Navigate to the group, edit it and select the Department/Engineering Tag.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/edit-and-tag-engineering.png&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/edit-and-tag-engineering-300x458.png&#34; alt=&#34;edit and tag engineering&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When changing groups, roles or tenants, the user doesn&amp;rsquo;t need to logout and login again. Changes are reflected on the next reload of the UI. If Joe reloads the UI, he will see no Virtual Machines or other objects anymore! The scope for the group and hence the user, was just limited to objects which are tagged as Department/Engineering - and no objects have been tagged so far.&lt;/p&gt;

&lt;p&gt;An object, like a Virtual Machine, a Host, Data Store etc. can be tagged by using the &amp;ldquo;Policy&amp;rdquo;, &amp;ldquo;Edit Tags&amp;rdquo; menu. After tagging a Virtual Machine and reloading the Web UI as Joe Doe, the VM will show up in the user interface.&lt;/p&gt;

&lt;p&gt;This works the same way for all other objects. If Joe Doe should be able to order a specific item from the service catalog, the item (or bundle) has to be tagged with the Department/Engineering tag to make it visible.&lt;/p&gt;

&lt;h2 id=&#34;first-gotcha&#34;&gt;First Gotcha!&lt;/h2&gt;

&lt;p&gt;You might have noticed, after setting the Department/Engineering Tag for the Group, no objects are showing up in the UI. This means, all relevant objects which should be visible for the user, must be tagged. As soon as you start using tags, you have to use them consistently.&lt;/p&gt;

&lt;h1 id=&#34;working-with-multiple-tags&#34;&gt;Working with multiple tags&lt;/h1&gt;

&lt;p&gt;If a Virtual Machine or any other object has to be visible to multiple Departments, it&amp;rsquo;s solved by just adding all the necessary Department tags. Adding the Department/Finance tag to a service catalog item, makes the item available for order to members of the Finance team.&lt;/p&gt;

&lt;p&gt;Tags in the same tag category are logical OR relationships. If at least one tag of the list of group tags in this category matches with at least one tag of the category of the target object, access is granted. In this example, if a user is in Department/Finance OR Department/Engineering, he or she will see the object. Users which are not in Engineering or Finance, will not see the object. This also applies, if the object isn&amp;rsquo;t tagged with any Department tag - which means, nobody will see it.&lt;/p&gt;

&lt;h2 id=&#34;second-gotcha&#34;&gt;Second Gotcha!&lt;/h2&gt;

&lt;p&gt;This also includes Super Administrators! If you restrict visibility of Super Administrators by assigning them tags, they will no longer see those objects which they don&amp;rsquo;t have matching tags for! Since Super Administrators can always fix tag assignments (or remove the tag filter for their group), they can restore full visibility. But better make sure you never limit Super Administrators by accident&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;working-with-multiple-tag-categories&#34;&gt;Working with multiple tag categories&lt;/h1&gt;

&lt;p&gt;When working in more complex environments, multiple tag categories have to be used. For example, tags can be used to separate Virtual Machines from different stages (Development, QA, Production), or different tag categories could be used to be more granular by granting access to service catalog items.&lt;/p&gt;

&lt;p&gt;As soon as multiple tag categories are introduced, things get a bit more complicated.&lt;/p&gt;

&lt;h2 id=&#34;third-gotcha&#34;&gt;Third Gotcha!&lt;/h2&gt;

&lt;p&gt;When using multiple tag categories, there is a logical AND between tag categories. This is probably best explained with an example. There is already an example tag category called &amp;ldquo;Environment&amp;rdquo; with tags associated like &amp;ldquo;Development&amp;rdquo;, &amp;ldquo;Production&amp;rdquo; and others.&lt;/p&gt;

&lt;p&gt;If the group &amp;ldquo;Engineering&amp;rdquo; of which Joe Doe is a member, gets the additional tag Environment/Development assigned, Joe can only see objects which have the Department/Engineering AND the Environment/Development tag assigned.  A Virtual Machine tagged as Department/Engineering and Environment/Production will be hidden from Joe.&lt;/p&gt;

&lt;p&gt;This is very important and is often causing confusion. As soon as you start tagging objects of your infrastructure with tags of different tag categories, the logical AND comes into play!&lt;/p&gt;

&lt;h1 id=&#34;tags-in-the-context-of-tenants&#34;&gt;Tags in the context of tenants&lt;/h1&gt;

&lt;p&gt;Tenants can be used to go even one step further when it comes to isolation and separation of the virtual and cloud infrastructure. Tenants can be nested and can also have projects as child elements. When working with tenants, it is important to remember that they limit also the visibility of objects.&lt;/p&gt;

&lt;p&gt;If Joe Doe moves into a new tenant, he will only see objects like Virtual Machines, which are owned by this tenant or one of its sub tenants. Tags are filtered with logical AND. This means, Joe will only see objects which are part of the tenant or any of the sub tenants AND are tagged appropriately. Objects which are owned by a parent or sibling tenant will never be visible to Joe, even if they are tagged with the proper tag (in this example Department/Engineering).&lt;/p&gt;

&lt;h1 id=&#34;conclusion-think-before-you-tag&#34;&gt;Conclusion: Think before you tag&lt;/h1&gt;

&lt;p&gt;Tags are a very simple and yet powerful way to manage access control lists. Sometimes people tend to over complicate things though and this makes it unnecessarily complicated. There are a few rules we try to follow when we plan tagging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;don&amp;rsquo;t use tags for information which is already available as an attribute: For example tagging all Windows VMs as Operating System Windows and tagging all Linux VMs similarly, is in most cases not a good idea, since this information is already stored in an VM attribute (you can create a filter to find all Windows VMs, you don&amp;rsquo;t need a tag to do that)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;try to reduce the number of tags and tag categories: having a large number of categories and tags make things complicated. Think before you add a new tag. Also keep in mind that you might have to tag (again) everything you already have (remember, logical AND between tag categories)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;try to use auto tagging: instead of manually tagging the infrastructure, try to write some Automate Code which does it for you. For example during provisioning time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Create Cobbler PXE/TFTP Records during VM Provisioning</title>
      <link>http://www.jung-christian.de/post/2016/08/create-cobbler-pxetftp-records-during-vm-provisioning/</link>
      <pubDate>Wed, 17 Aug 2016 14:46:11 +0000</pubDate>
      
      <guid>http://www.jung-christian.de/post/2016/08/create-cobbler-pxetftp-records-during-vm-provisioning/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://access.redhat.com/documentation/en/red-hat-satellite/&#34;&gt;Red Hat Satellite 5.x&lt;/a&gt; is using &lt;a href=&#34;https://cobbler.github.io/&#34;&gt;Cobbler&lt;/a&gt; to manage DHCP and TFTP configuration files. A while back, we posted an article on how to use &lt;a href=&#34;http://cloudformsblog.redhat.com/2013/05/03/cobbler-provisioning-via-cloudforms-2-0/&#34;&gt;Cobbler Provisioning via CloudForms 2.0&lt;/a&gt;. Since the original post was written for CloudForms 2.0 in 2013, it&amp;rsquo;s probably time for an update.&lt;/p&gt;

&lt;p&gt;I rewrote the script and uploaded it to &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/Automate/Integration/ConfigurationManagement/Cobbler.class&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To add a Cobbler system record during provisioning, an additional step in the provisioning state machine is necessary.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/cobbler-statemachine.png&#34; title=&#34;Cobbler State Machine&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/cobbler-statemachine-300x183.png&#34; alt=&#34;cobbler-statemachine&#34; title=&#34;Cobbler State Machine&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please make sure you only use CreateCobblerRecord or RegisterForeman if the attributes for the instances have been declared. For Foreman this was &lt;a href=&#34;http://www.jung-christian.de/2015/04/how-to-provision-vms-with-foreman-and-manageiq/&#34;&gt;documented in a previous post&lt;/a&gt;, for Cobbler, it could look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/cobbler-instance.png&#34; title=&#34;Cobbler Instance&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/cobbler-instance-300x114.png&#34; alt=&#34;cobbler-instance&#34; title=&#34;Cobbler Instance&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add an additional network interface on RHEV virtual machines</title>
      <link>http://www.jung-christian.de/post/2016/08/add-an-additional-network-interface-on-rhev-virtual-machines/</link>
      <pubDate>Fri, 05 Aug 2016 15:30:05 +0000</pubDate>
      
      <guid>http://www.jung-christian.de/post/2016/08/add-an-additional-network-interface-on-rhev-virtual-machines/</guid>
      <description>&lt;p&gt;Similar to the previous post on how to &lt;a href=&#34;http://www.jung-christian.de/2016/08/add-an-additional-disk-on-rhev-virtual-machines/&#34;&gt;add additional disks for existing virtual machines&lt;/a&gt; running on RHEV, this article describes how to add additional network interfaces to virtual machines running in RHEV.&lt;/p&gt;

&lt;p&gt;The implementation follows the same concept:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;use a dynamic drop down list to make the selection of available networks available to the user&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;specify the name of the new interface&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create a button to call the action&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;and the actual code which adds the network interfaces to the specified virtual machine&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the setup is very similar to what was described in the previous post, here are the links to the &lt;a href=&#34;https://raw.githubusercontent.com/cbolz/ManageIQ/master/service-dialogs/dialog-hot-add-nic.yml&#34;&gt;Service Dialog&lt;/a&gt; and the &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/Automate&#34;&gt;Automate Code&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add an additional disk on RHEV virtual machines</title>
      <link>http://www.jung-christian.de/post/2016/08/add-an-additional-disk-on-rhev-virtual-machines/</link>
      <pubDate>Fri, 05 Aug 2016 15:25:41 +0000</pubDate>
      
      <guid>http://www.jung-christian.de/post/2016/08/add-an-additional-disk-on-rhev-virtual-machines/</guid>
      <description>

&lt;p&gt;I was working on a script to add additional disks to existing virtual machines running on Red Hat Enterprise Virtualization (RHEV). I did find some code original written by Eduardo Minguez which I just polished a little bit. Thanks to him I published the full code on Github under the terms of the GPL.&lt;/p&gt;

&lt;p&gt;There are actually multiple steps to build a user friendly way for adding the virtual disk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create an additional button for the VM object&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;provide a dialog to select disk size, data store and allocation policy (thin vs preallocated)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;select from a list of available datastores created by a dynamic dropdown list&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the actual code which adds the virtual disk to the VM&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code was tested on CloudForms 4.0/4.1 and RHEV 3.4 - but it should work with other versions and the respective OpenSource Projects too.&lt;/p&gt;

&lt;h1 id=&#34;automate-code&#34;&gt;Automate Code&lt;/h1&gt;

&lt;p&gt;There are two methods to implement this functionality. The first method &amp;ldquo;dialog_add_disk&amp;rdquo; will provide a dynamic drop down list from which the user will be able to select one of the existing RHEV data stores. The new virtual disk will be created on the selected storage.&lt;/p&gt;

&lt;p&gt;The second method &amp;ldquo;hot_add_disk&amp;rdquo; will parse this information plus the other settings provided by the user (allocation policy and size) and create the virtual disk.&lt;/p&gt;

&lt;p&gt;Both methods can be found on &lt;a href=&#34;https://github.com/cbolz/ManageIQ/tree/master/Automate&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;service-dialog&#34;&gt;Service Dialog&lt;/h1&gt;

&lt;p&gt;The second step is to create a service dialog which asks the user for required information. If you create the dialog manually, make sure the field are using the proper names, or the &amp;ldquo;hot_add_disk&amp;rdquo; method will not be able to find the values.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;size&amp;rdquo;: and integer value of the new disk size in GB&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;datastore&amp;rdquo;: the name of the data store, ideally coming from a dynamic dialog&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;allocpolicy&amp;rdquo;: allocation policy, possible values are &amp;ldquo;thick&amp;rdquo; or &amp;ldquo;thin&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For your convenience I exported my service dialog and put it on &lt;a href=&#34;https://raw.githubusercontent.com/cbolz/ManageIQ/master/service-dialogs/dialog-hot-add-disk.yml&#34;&gt;Github&lt;/a&gt; too.&lt;/p&gt;

&lt;h1 id=&#34;button&#34;&gt;Button&lt;/h1&gt;

&lt;p&gt;To put everything together, a button has to be created and associated to virtual machine objects. For the button it is important to specify the correct value for &amp;ldquo;System/Process&amp;rdquo; which should be set to &amp;ldquo;Request&amp;rdquo;, and the request name which has to match the name of the instance. In the provided Automate export the name of the instance is &amp;ldquo;hot_add_disk&amp;rdquo; which has to be put into the &amp;ldquo;Request&amp;rdquo; field.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jung-christian.de/images/button-hot-add-disk.png&#34; title=&#34;Button for hot add disk&#34;&gt;&lt;img src=&#34;http://www.jung-christian.de/images/button-hot-add-disk-300x308.png&#34; alt=&#34;button-hot-add-disk&#34; title=&#34;Button for hot add disk&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;a-few-words-about-the-code&#34;&gt;A few words about the code&lt;/h1&gt;

&lt;p&gt;The &amp;ldquo;dialog_add_disk&amp;rdquo; method has probably two blocks worth describing. The function &amp;ldquo;getstorages&amp;rdquo; will use the provided host name and credentials to retrieve a list of all available storage domains. This list is filtered by type &amp;ldquo;data&amp;rdquo; to exclude ISO and Export domains. The resulting list of storage domain is stored in an array which later stored in the $evm.object to populate the dynamic dialog fields.&lt;/p&gt;

&lt;p&gt;The second noteworthy code block is the following section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  vm=$evm.root[&#39;vm&#39;]
  ext_mgt_system = vm.ext_management_system
  rhevmhost = &amp;quot;https://#{ext_mgt_system.hostname}&amp;quot;
  rhevmuser = ext_mgt_system.authentication_userid
  rhevmpass = ext_mgt_system.authentication_password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This piece of code does first retrieve the VM object (from which the button was clicked) and will then retrieve the details for the management system. This object does contain the host name and credentials to communicate to the provider. This is a nice way of retrieving those credentials from the internal database instead of hard coding them or providing them in the instance attributes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Orchestrating OpenShift Enterprise with ManageIQ</title>
      <link>http://www.jung-christian.de/post/2016/06/orchestrating-openshift-enterprise-with-manageiq/</link>
      <pubDate>Fri, 03 Jun 2016 09:18:15 +0000</pubDate>
      
      <guid>http://www.jung-christian.de/post/2016/06/orchestrating-openshift-enterprise-with-manageiq/</guid>
      <description>&lt;p&gt;A nice post on how to scale &lt;a href=&#34;http://Orchestrating OpenShift Enterprise with ManageIQ&#34;&gt;OpenShift Applications with ManageIQ&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to provision Azure workloads with CloudForms</title>
      <link>http://www.jung-christian.de/post/2016/02/how-to-provision-azure-workloads-with-cloudforms/</link>
      <pubDate>Mon, 22 Feb 2016 10:21:15 +0000</pubDate>
      
      <guid>http://www.jung-christian.de/post/2016/02/how-to-provision-azure-workloads-with-cloudforms/</guid>
      <description>&lt;p&gt;Just found this very good video demonstration on &lt;a href=&#34;http://www.videoqe.com/videogallery/cloudforms-4-0-provision-azure-vm/&#34;&gt;how to provision workloads&lt;/a&gt; on Microsoft Azure with CloudForms.&lt;/p&gt;

&lt;p&gt;Check out the site for other good video demonstrations too.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>